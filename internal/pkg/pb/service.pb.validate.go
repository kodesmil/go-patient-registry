// Code generated by protoc-gen-validate
// source: github.com/kodesmil/ks-model/service.proto
// DO NOT EDIT!!!

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on ServiceTag with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ServiceTag) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Key

	// no validation rules for Name

	return nil
}

// ServiceTagValidationError is the validation error returned by
// ServiceTag.Validate if the designated constraints aren't met.
type ServiceTagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceTagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceTagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceTagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceTagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceTagValidationError) ErrorName() string { return "ServiceTagValidationError" }

// Error satisfies the builtin error interface
func (e ServiceTagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceTagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceTagValidationError{}

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Service) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Type

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on ServiceOffer with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ServiceOffer) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceOfferValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceOfferValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceOfferValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Price

	// no validation rules for Currency

	if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceOfferValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceOfferValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Description

	// no validation rules for Title

	// no validation rules for PictureUrl

	for idx, item := range m.GetSessions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceOfferValidationError{
					field:  fmt.Sprintf("Sessions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceOfferValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ServiceOfferValidationError is the validation error returned by
// ServiceOffer.Validate if the designated constraints aren't met.
type ServiceOfferValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceOfferValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceOfferValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceOfferValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceOfferValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceOfferValidationError) ErrorName() string { return "ServiceOfferValidationError" }

// Error satisfies the builtin error interface
func (e ServiceOfferValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceOffer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceOfferValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceOfferValidationError{}

// Validate checks the field values on ServiceEmployment with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ServiceEmployment) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceEmploymentValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceEmploymentValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProfileId

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for CanBeContacted

	if v, ok := interface{}(m.GetServiceProviderId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceEmploymentValidationError{
				field:  "ServiceProviderId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ServiceEmploymentValidationError is the validation error returned by
// ServiceEmployment.Validate if the designated constraints aren't met.
type ServiceEmploymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceEmploymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceEmploymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceEmploymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceEmploymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceEmploymentValidationError) ErrorName() string {
	return "ServiceEmploymentValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceEmploymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceEmployment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceEmploymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceEmploymentValidationError{}

// Validate checks the field values on ServiceDetails with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ServiceDetails) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceDetailsValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceDetailsValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Address

	// no validation rules for Phone

	// no validation rules for LogoUrl

	// no validation rules for Email

	return nil
}

// ServiceDetailsValidationError is the validation error returned by
// ServiceDetails.Validate if the designated constraints aren't met.
type ServiceDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceDetailsValidationError) ErrorName() string { return "ServiceDetailsValidationError" }

// Error satisfies the builtin error interface
func (e ServiceDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceDetailsValidationError{}

// Validate checks the field values on ServiceApplication with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ServiceApplication) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceApplicationValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceApplicationValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceApplicationValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceApplicationValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceApplicationValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetAppliedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceApplicationValidationError{
				field:  "AppliedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetApprovedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceApplicationValidationError{
				field:  "ApprovedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetReviewerId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceApplicationValidationError{
				field:  "ReviewerId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ServiceApplicationValidationError is the validation error returned by
// ServiceApplication.Validate if the designated constraints aren't met.
type ServiceApplicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceApplicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceApplicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceApplicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceApplicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceApplicationValidationError) ErrorName() string {
	return "ServiceApplicationValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceApplicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceApplication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceApplicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceApplicationValidationError{}

// Validate checks the field values on ServiceApplicationFile with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ServiceApplicationFile) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceApplicationFileValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceApplicationFileValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceApplicationFileValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Url

	return nil
}

// ServiceApplicationFileValidationError is the validation error returned by
// ServiceApplicationFile.Validate if the designated constraints aren't met.
type ServiceApplicationFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceApplicationFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceApplicationFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceApplicationFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceApplicationFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceApplicationFileValidationError) ErrorName() string {
	return "ServiceApplicationFileValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceApplicationFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceApplicationFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceApplicationFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceApplicationFileValidationError{}

// Validate checks the field values on ServiceProvider with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ServiceProvider) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceProviderValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceProviderValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceProviderValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceProviderValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetOffers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceProviderValidationError{
					field:  fmt.Sprintf("Offers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEmployments() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceProviderValidationError{
					field:  fmt.Sprintf("Employments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ServiceProviderValidationError is the validation error returned by
// ServiceProvider.Validate if the designated constraints aren't met.
type ServiceProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceProviderValidationError) ErrorName() string { return "ServiceProviderValidationError" }

// Error satisfies the builtin error interface
func (e ServiceProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceProviderValidationError{}

// Validate checks the field values on CreateServiceProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServiceProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceProviderRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceProviderRequestValidationError is the validation error returned
// by CreateServiceProviderRequest.Validate if the designated constraints
// aren't met.
type CreateServiceProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceProviderRequestValidationError) ErrorName() string {
	return "CreateServiceProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceProviderRequestValidationError{}

// Validate checks the field values on CreateServiceProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServiceProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceProviderResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceProviderResponseValidationError is the validation error
// returned by CreateServiceProviderResponse.Validate if the designated
// constraints aren't met.
type CreateServiceProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceProviderResponseValidationError) ErrorName() string {
	return "CreateServiceProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceProviderResponseValidationError{}

// Validate checks the field values on ReadServiceProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadServiceProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadServiceProviderRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadServiceProviderRequestValidationError is the validation error returned
// by ReadServiceProviderRequest.Validate if the designated constraints aren't met.
type ReadServiceProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceProviderRequestValidationError) ErrorName() string {
	return "ReadServiceProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceProviderRequestValidationError{}

// Validate checks the field values on ReadServiceProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadServiceProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadServiceProviderResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadServiceProviderResponseValidationError is the validation error returned
// by ReadServiceProviderResponse.Validate if the designated constraints
// aren't met.
type ReadServiceProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceProviderResponseValidationError) ErrorName() string {
	return "ReadServiceProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceProviderResponseValidationError{}

// Validate checks the field values on UpdateServiceProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateServiceProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceProviderRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateServiceProviderRequestValidationError is the validation error returned
// by UpdateServiceProviderRequest.Validate if the designated constraints
// aren't met.
type UpdateServiceProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceProviderRequestValidationError) ErrorName() string {
	return "UpdateServiceProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceProviderRequestValidationError{}

// Validate checks the field values on UpdateServiceProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateServiceProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceProviderResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateServiceProviderResponseValidationError is the validation error
// returned by UpdateServiceProviderResponse.Validate if the designated
// constraints aren't met.
type UpdateServiceProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceProviderResponseValidationError) ErrorName() string {
	return "UpdateServiceProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceProviderResponseValidationError{}

// Validate checks the field values on DeleteServiceProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteServiceProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteServiceProviderRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteServiceProviderRequestValidationError is the validation error returned
// by DeleteServiceProviderRequest.Validate if the designated constraints
// aren't met.
type DeleteServiceProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceProviderRequestValidationError) ErrorName() string {
	return "DeleteServiceProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceProviderRequestValidationError{}

// Validate checks the field values on DeleteServiceProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteServiceProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteServiceProviderResponseValidationError is the validation error
// returned by DeleteServiceProviderResponse.Validate if the designated
// constraints aren't met.
type DeleteServiceProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceProviderResponseValidationError) ErrorName() string {
	return "DeleteServiceProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceProviderResponseValidationError{}

// Validate checks the field values on ListServiceProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceProviderRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceProviderRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceProviderRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceProviderRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListServiceProviderRequestValidationError is the validation error returned
// by ListServiceProviderRequest.Validate if the designated constraints aren't met.
type ListServiceProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceProviderRequestValidationError) ErrorName() string {
	return "ListServiceProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceProviderRequestValidationError{}

// Validate checks the field values on ListServiceProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceProviderResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListServiceProviderResponseValidationError is the validation error returned
// by ListServiceProviderResponse.Validate if the designated constraints
// aren't met.
type ListServiceProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceProviderResponseValidationError) ErrorName() string {
	return "ListServiceProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceProviderResponseValidationError{}

// Validate checks the field values on CreateServiceApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServiceApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceApplicationRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceApplicationRequestValidationError is the validation error
// returned by CreateServiceApplicationRequest.Validate if the designated
// constraints aren't met.
type CreateServiceApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceApplicationRequestValidationError) ErrorName() string {
	return "CreateServiceApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceApplicationRequestValidationError{}

// Validate checks the field values on CreateServiceApplicationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *CreateServiceApplicationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceApplicationResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceApplicationResponseValidationError is the validation error
// returned by CreateServiceApplicationResponse.Validate if the designated
// constraints aren't met.
type CreateServiceApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceApplicationResponseValidationError) ErrorName() string {
	return "CreateServiceApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceApplicationResponseValidationError{}

// Validate checks the field values on ReadServiceApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadServiceApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadServiceApplicationRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadServiceApplicationRequestValidationError is the validation error
// returned by ReadServiceApplicationRequest.Validate if the designated
// constraints aren't met.
type ReadServiceApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceApplicationRequestValidationError) ErrorName() string {
	return "ReadServiceApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceApplicationRequestValidationError{}

// Validate checks the field values on ReadServiceApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadServiceApplicationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadServiceApplicationResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadServiceApplicationResponseValidationError is the validation error
// returned by ReadServiceApplicationResponse.Validate if the designated
// constraints aren't met.
type ReadServiceApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceApplicationResponseValidationError) ErrorName() string {
	return "ReadServiceApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceApplicationResponseValidationError{}

// Validate checks the field values on UpdateServiceApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateServiceApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceApplicationRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateServiceApplicationRequestValidationError is the validation error
// returned by UpdateServiceApplicationRequest.Validate if the designated
// constraints aren't met.
type UpdateServiceApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceApplicationRequestValidationError) ErrorName() string {
	return "UpdateServiceApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceApplicationRequestValidationError{}

// Validate checks the field values on UpdateServiceApplicationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateServiceApplicationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceApplicationResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateServiceApplicationResponseValidationError is the validation error
// returned by UpdateServiceApplicationResponse.Validate if the designated
// constraints aren't met.
type UpdateServiceApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceApplicationResponseValidationError) ErrorName() string {
	return "UpdateServiceApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceApplicationResponseValidationError{}

// Validate checks the field values on DeleteServiceApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteServiceApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteServiceApplicationRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteServiceApplicationRequestValidationError is the validation error
// returned by DeleteServiceApplicationRequest.Validate if the designated
// constraints aren't met.
type DeleteServiceApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceApplicationRequestValidationError) ErrorName() string {
	return "DeleteServiceApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceApplicationRequestValidationError{}

// Validate checks the field values on DeleteServiceApplicationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *DeleteServiceApplicationResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteServiceApplicationResponseValidationError is the validation error
// returned by DeleteServiceApplicationResponse.Validate if the designated
// constraints aren't met.
type DeleteServiceApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceApplicationResponseValidationError) ErrorName() string {
	return "DeleteServiceApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceApplicationResponseValidationError{}

// Validate checks the field values on ListServiceApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceApplicationRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceApplicationRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceApplicationRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceApplicationRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListServiceApplicationRequestValidationError is the validation error
// returned by ListServiceApplicationRequest.Validate if the designated
// constraints aren't met.
type ListServiceApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceApplicationRequestValidationError) ErrorName() string {
	return "ListServiceApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceApplicationRequestValidationError{}

// Validate checks the field values on ListServiceApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceApplicationResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceApplicationResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListServiceApplicationResponseValidationError is the validation error
// returned by ListServiceApplicationResponse.Validate if the designated
// constraints aren't met.
type ListServiceApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceApplicationResponseValidationError) ErrorName() string {
	return "ListServiceApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceApplicationResponseValidationError{}

// Validate checks the field values on CreateServiceTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServiceTagRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceTagRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceTagRequestValidationError is the validation error returned by
// CreateServiceTagRequest.Validate if the designated constraints aren't met.
type CreateServiceTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceTagRequestValidationError) ErrorName() string {
	return "CreateServiceTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceTagRequestValidationError{}

// Validate checks the field values on CreateServiceTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServiceTagResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceTagResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceTagResponseValidationError is the validation error returned by
// CreateServiceTagResponse.Validate if the designated constraints aren't met.
type CreateServiceTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceTagResponseValidationError) ErrorName() string {
	return "CreateServiceTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceTagResponseValidationError{}

// Validate checks the field values on ReadServiceTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadServiceTagRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ReadServiceTagRequestValidationError is the validation error returned by
// ReadServiceTagRequest.Validate if the designated constraints aren't met.
type ReadServiceTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceTagRequestValidationError) ErrorName() string {
	return "ReadServiceTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceTagRequestValidationError{}

// Validate checks the field values on ReadServiceTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadServiceTagResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadServiceTagResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadServiceTagResponseValidationError is the validation error returned by
// ReadServiceTagResponse.Validate if the designated constraints aren't met.
type ReadServiceTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceTagResponseValidationError) ErrorName() string {
	return "ReadServiceTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceTagResponseValidationError{}

// Validate checks the field values on UpdateServiceTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateServiceTagRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceTagRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateServiceTagRequestValidationError is the validation error returned by
// UpdateServiceTagRequest.Validate if the designated constraints aren't met.
type UpdateServiceTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceTagRequestValidationError) ErrorName() string {
	return "UpdateServiceTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceTagRequestValidationError{}

// Validate checks the field values on UpdateServiceTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateServiceTagResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceTagResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateServiceTagResponseValidationError is the validation error returned by
// UpdateServiceTagResponse.Validate if the designated constraints aren't met.
type UpdateServiceTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceTagResponseValidationError) ErrorName() string {
	return "UpdateServiceTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceTagResponseValidationError{}

// Validate checks the field values on DeleteServiceTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteServiceTagRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteServiceTagRequestValidationError is the validation error returned by
// DeleteServiceTagRequest.Validate if the designated constraints aren't met.
type DeleteServiceTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceTagRequestValidationError) ErrorName() string {
	return "DeleteServiceTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceTagRequestValidationError{}

// Validate checks the field values on DeleteServiceTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteServiceTagResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteServiceTagResponseValidationError is the validation error returned by
// DeleteServiceTagResponse.Validate if the designated constraints aren't met.
type DeleteServiceTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceTagResponseValidationError) ErrorName() string {
	return "DeleteServiceTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceTagResponseValidationError{}

// Validate checks the field values on ListServiceTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceTagRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceTagRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceTagRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceTagRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceTagRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListServiceTagRequestValidationError is the validation error returned by
// ListServiceTagRequest.Validate if the designated constraints aren't met.
type ListServiceTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceTagRequestValidationError) ErrorName() string {
	return "ListServiceTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceTagRequestValidationError{}

// Validate checks the field values on ListServiceTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceTagResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceTagResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListServiceTagResponseValidationError is the validation error returned by
// ListServiceTagResponse.Validate if the designated constraints aren't met.
type ListServiceTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceTagResponseValidationError) ErrorName() string {
	return "ListServiceTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceTagResponseValidationError{}

// Validate checks the field values on CreateServiceApplicationFileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *CreateServiceApplicationFileRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceApplicationFileRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceApplicationFileRequestValidationError is the validation error
// returned by CreateServiceApplicationFileRequest.Validate if the designated
// constraints aren't met.
type CreateServiceApplicationFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceApplicationFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceApplicationFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceApplicationFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceApplicationFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceApplicationFileRequestValidationError) ErrorName() string {
	return "CreateServiceApplicationFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceApplicationFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceApplicationFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceApplicationFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceApplicationFileRequestValidationError{}

// Validate checks the field values on CreateServiceApplicationFileResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *CreateServiceApplicationFileResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceApplicationFileResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceApplicationFileResponseValidationError is the validation error
// returned by CreateServiceApplicationFileResponse.Validate if the designated
// constraints aren't met.
type CreateServiceApplicationFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceApplicationFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceApplicationFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceApplicationFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceApplicationFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceApplicationFileResponseValidationError) ErrorName() string {
	return "CreateServiceApplicationFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceApplicationFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceApplicationFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceApplicationFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceApplicationFileResponseValidationError{}

// Validate checks the field values on ReadServiceApplicationFileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ReadServiceApplicationFileRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadServiceApplicationFileRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadServiceApplicationFileRequestValidationError is the validation error
// returned by ReadServiceApplicationFileRequest.Validate if the designated
// constraints aren't met.
type ReadServiceApplicationFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceApplicationFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceApplicationFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceApplicationFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceApplicationFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceApplicationFileRequestValidationError) ErrorName() string {
	return "ReadServiceApplicationFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceApplicationFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceApplicationFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceApplicationFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceApplicationFileRequestValidationError{}

// Validate checks the field values on ReadServiceApplicationFileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ReadServiceApplicationFileResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadServiceApplicationFileResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadServiceApplicationFileResponseValidationError is the validation error
// returned by ReadServiceApplicationFileResponse.Validate if the designated
// constraints aren't met.
type ReadServiceApplicationFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceApplicationFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceApplicationFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceApplicationFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceApplicationFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceApplicationFileResponseValidationError) ErrorName() string {
	return "ReadServiceApplicationFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceApplicationFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceApplicationFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceApplicationFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceApplicationFileResponseValidationError{}

// Validate checks the field values on UpdateServiceApplicationFileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateServiceApplicationFileRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceApplicationFileRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateServiceApplicationFileRequestValidationError is the validation error
// returned by UpdateServiceApplicationFileRequest.Validate if the designated
// constraints aren't met.
type UpdateServiceApplicationFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceApplicationFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceApplicationFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceApplicationFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceApplicationFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceApplicationFileRequestValidationError) ErrorName() string {
	return "UpdateServiceApplicationFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceApplicationFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceApplicationFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceApplicationFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceApplicationFileRequestValidationError{}

// Validate checks the field values on UpdateServiceApplicationFileResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateServiceApplicationFileResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceApplicationFileResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateServiceApplicationFileResponseValidationError is the validation error
// returned by UpdateServiceApplicationFileResponse.Validate if the designated
// constraints aren't met.
type UpdateServiceApplicationFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceApplicationFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceApplicationFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceApplicationFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceApplicationFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceApplicationFileResponseValidationError) ErrorName() string {
	return "UpdateServiceApplicationFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceApplicationFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceApplicationFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceApplicationFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceApplicationFileResponseValidationError{}

// Validate checks the field values on DeleteServiceApplicationFileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *DeleteServiceApplicationFileRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteServiceApplicationFileRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteServiceApplicationFileRequestValidationError is the validation error
// returned by DeleteServiceApplicationFileRequest.Validate if the designated
// constraints aren't met.
type DeleteServiceApplicationFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceApplicationFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceApplicationFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceApplicationFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceApplicationFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceApplicationFileRequestValidationError) ErrorName() string {
	return "DeleteServiceApplicationFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceApplicationFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceApplicationFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceApplicationFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceApplicationFileRequestValidationError{}

// Validate checks the field values on DeleteServiceApplicationFileResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *DeleteServiceApplicationFileResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteServiceApplicationFileResponseValidationError is the validation error
// returned by DeleteServiceApplicationFileResponse.Validate if the designated
// constraints aren't met.
type DeleteServiceApplicationFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceApplicationFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceApplicationFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceApplicationFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceApplicationFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceApplicationFileResponseValidationError) ErrorName() string {
	return "DeleteServiceApplicationFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceApplicationFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceApplicationFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceApplicationFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceApplicationFileResponseValidationError{}

// Validate checks the field values on ListServiceApplicationFileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListServiceApplicationFileRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceApplicationFileRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceApplicationFileRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceApplicationFileRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceApplicationFileRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListServiceApplicationFileRequestValidationError is the validation error
// returned by ListServiceApplicationFileRequest.Validate if the designated
// constraints aren't met.
type ListServiceApplicationFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceApplicationFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceApplicationFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceApplicationFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceApplicationFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceApplicationFileRequestValidationError) ErrorName() string {
	return "ListServiceApplicationFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceApplicationFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceApplicationFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceApplicationFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceApplicationFileRequestValidationError{}

// Validate checks the field values on ListServiceApplicationFileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListServiceApplicationFileResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceApplicationFileResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListServiceApplicationFileResponseValidationError is the validation error
// returned by ListServiceApplicationFileResponse.Validate if the designated
// constraints aren't met.
type ListServiceApplicationFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceApplicationFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceApplicationFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceApplicationFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceApplicationFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceApplicationFileResponseValidationError) ErrorName() string {
	return "ListServiceApplicationFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceApplicationFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceApplicationFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceApplicationFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceApplicationFileResponseValidationError{}

// Validate checks the field values on CreateServiceOfferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServiceOfferRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceOfferRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceOfferRequestValidationError is the validation error returned by
// CreateServiceOfferRequest.Validate if the designated constraints aren't met.
type CreateServiceOfferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceOfferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceOfferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceOfferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceOfferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceOfferRequestValidationError) ErrorName() string {
	return "CreateServiceOfferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceOfferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceOfferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceOfferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceOfferRequestValidationError{}

// Validate checks the field values on CreateServiceOfferResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServiceOfferResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceOfferResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceOfferResponseValidationError is the validation error returned
// by CreateServiceOfferResponse.Validate if the designated constraints aren't met.
type CreateServiceOfferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceOfferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceOfferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceOfferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceOfferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceOfferResponseValidationError) ErrorName() string {
	return "CreateServiceOfferResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceOfferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceOfferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceOfferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceOfferResponseValidationError{}

// Validate checks the field values on ReadServiceOfferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadServiceOfferRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadServiceOfferRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadServiceOfferRequestValidationError is the validation error returned by
// ReadServiceOfferRequest.Validate if the designated constraints aren't met.
type ReadServiceOfferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceOfferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceOfferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceOfferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceOfferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceOfferRequestValidationError) ErrorName() string {
	return "ReadServiceOfferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceOfferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceOfferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceOfferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceOfferRequestValidationError{}

// Validate checks the field values on ReadServiceOfferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadServiceOfferResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadServiceOfferResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadServiceOfferResponseValidationError is the validation error returned by
// ReadServiceOfferResponse.Validate if the designated constraints aren't met.
type ReadServiceOfferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceOfferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceOfferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceOfferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceOfferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceOfferResponseValidationError) ErrorName() string {
	return "ReadServiceOfferResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceOfferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceOfferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceOfferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceOfferResponseValidationError{}

// Validate checks the field values on UpdateServiceOfferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateServiceOfferRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceOfferRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateServiceOfferRequestValidationError is the validation error returned by
// UpdateServiceOfferRequest.Validate if the designated constraints aren't met.
type UpdateServiceOfferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceOfferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceOfferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceOfferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceOfferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceOfferRequestValidationError) ErrorName() string {
	return "UpdateServiceOfferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceOfferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceOfferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceOfferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceOfferRequestValidationError{}

// Validate checks the field values on UpdateServiceOfferResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateServiceOfferResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceOfferResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateServiceOfferResponseValidationError is the validation error returned
// by UpdateServiceOfferResponse.Validate if the designated constraints aren't met.
type UpdateServiceOfferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceOfferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceOfferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceOfferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceOfferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceOfferResponseValidationError) ErrorName() string {
	return "UpdateServiceOfferResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceOfferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceOfferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceOfferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceOfferResponseValidationError{}

// Validate checks the field values on DeleteServiceOfferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteServiceOfferRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteServiceOfferRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteServiceOfferRequestValidationError is the validation error returned by
// DeleteServiceOfferRequest.Validate if the designated constraints aren't met.
type DeleteServiceOfferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceOfferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceOfferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceOfferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceOfferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceOfferRequestValidationError) ErrorName() string {
	return "DeleteServiceOfferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceOfferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceOfferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceOfferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceOfferRequestValidationError{}

// Validate checks the field values on DeleteServiceOfferResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteServiceOfferResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteServiceOfferResponseValidationError is the validation error returned
// by DeleteServiceOfferResponse.Validate if the designated constraints aren't met.
type DeleteServiceOfferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceOfferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceOfferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceOfferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceOfferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceOfferResponseValidationError) ErrorName() string {
	return "DeleteServiceOfferResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceOfferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceOfferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceOfferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceOfferResponseValidationError{}

// Validate checks the field values on ListServiceOfferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceOfferRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceOfferRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceOfferRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceOfferRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceOfferRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListServiceOfferRequestValidationError is the validation error returned by
// ListServiceOfferRequest.Validate if the designated constraints aren't met.
type ListServiceOfferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceOfferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceOfferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceOfferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceOfferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceOfferRequestValidationError) ErrorName() string {
	return "ListServiceOfferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceOfferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceOfferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceOfferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceOfferRequestValidationError{}

// Validate checks the field values on ListServiceOfferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceOfferResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceOfferResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListServiceOfferResponseValidationError is the validation error returned by
// ListServiceOfferResponse.Validate if the designated constraints aren't met.
type ListServiceOfferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceOfferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceOfferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceOfferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceOfferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceOfferResponseValidationError) ErrorName() string {
	return "ListServiceOfferResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceOfferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceOfferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceOfferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceOfferResponseValidationError{}

// Validate checks the field values on CreateServiceDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServiceDetailsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceDetailsRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceDetailsRequestValidationError is the validation error returned
// by CreateServiceDetailsRequest.Validate if the designated constraints
// aren't met.
type CreateServiceDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceDetailsRequestValidationError) ErrorName() string {
	return "CreateServiceDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceDetailsRequestValidationError{}

// Validate checks the field values on CreateServiceDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServiceDetailsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceDetailsResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceDetailsResponseValidationError is the validation error returned
// by CreateServiceDetailsResponse.Validate if the designated constraints
// aren't met.
type CreateServiceDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceDetailsResponseValidationError) ErrorName() string {
	return "CreateServiceDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceDetailsResponseValidationError{}

// Validate checks the field values on ReadServiceDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadServiceDetailsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ReadServiceDetailsRequestValidationError is the validation error returned by
// ReadServiceDetailsRequest.Validate if the designated constraints aren't met.
type ReadServiceDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceDetailsRequestValidationError) ErrorName() string {
	return "ReadServiceDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceDetailsRequestValidationError{}

// Validate checks the field values on ReadServiceDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadServiceDetailsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadServiceDetailsResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadServiceDetailsResponseValidationError is the validation error returned
// by ReadServiceDetailsResponse.Validate if the designated constraints aren't met.
type ReadServiceDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceDetailsResponseValidationError) ErrorName() string {
	return "ReadServiceDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceDetailsResponseValidationError{}

// Validate checks the field values on UpdateServiceDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateServiceDetailsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceDetailsRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateServiceDetailsRequestValidationError is the validation error returned
// by UpdateServiceDetailsRequest.Validate if the designated constraints
// aren't met.
type UpdateServiceDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceDetailsRequestValidationError) ErrorName() string {
	return "UpdateServiceDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceDetailsRequestValidationError{}

// Validate checks the field values on UpdateServiceDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateServiceDetailsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceDetailsResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateServiceDetailsResponseValidationError is the validation error returned
// by UpdateServiceDetailsResponse.Validate if the designated constraints
// aren't met.
type UpdateServiceDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceDetailsResponseValidationError) ErrorName() string {
	return "UpdateServiceDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceDetailsResponseValidationError{}

// Validate checks the field values on DeleteServiceDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteServiceDetailsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteServiceDetailsRequestValidationError is the validation error returned
// by DeleteServiceDetailsRequest.Validate if the designated constraints
// aren't met.
type DeleteServiceDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceDetailsRequestValidationError) ErrorName() string {
	return "DeleteServiceDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceDetailsRequestValidationError{}

// Validate checks the field values on DeleteServiceDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteServiceDetailsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteServiceDetailsResponseValidationError is the validation error returned
// by DeleteServiceDetailsResponse.Validate if the designated constraints
// aren't met.
type DeleteServiceDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceDetailsResponseValidationError) ErrorName() string {
	return "DeleteServiceDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceDetailsResponseValidationError{}

// Validate checks the field values on ListServiceDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceDetailsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceDetailsRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceDetailsRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceDetailsRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceDetailsRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListServiceDetailsRequestValidationError is the validation error returned by
// ListServiceDetailsRequest.Validate if the designated constraints aren't met.
type ListServiceDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceDetailsRequestValidationError) ErrorName() string {
	return "ListServiceDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceDetailsRequestValidationError{}

// Validate checks the field values on ListServiceDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceDetailsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceDetailsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListServiceDetailsResponseValidationError is the validation error returned
// by ListServiceDetailsResponse.Validate if the designated constraints aren't met.
type ListServiceDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceDetailsResponseValidationError) ErrorName() string {
	return "ListServiceDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceDetailsResponseValidationError{}

// Validate checks the field values on CreateServiceEmploymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServiceEmploymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceEmploymentRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceEmploymentRequestValidationError is the validation error
// returned by CreateServiceEmploymentRequest.Validate if the designated
// constraints aren't met.
type CreateServiceEmploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceEmploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceEmploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceEmploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceEmploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceEmploymentRequestValidationError) ErrorName() string {
	return "CreateServiceEmploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceEmploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceEmploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceEmploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceEmploymentRequestValidationError{}

// Validate checks the field values on CreateServiceEmploymentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServiceEmploymentResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceEmploymentResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceEmploymentResponseValidationError is the validation error
// returned by CreateServiceEmploymentResponse.Validate if the designated
// constraints aren't met.
type CreateServiceEmploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceEmploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceEmploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceEmploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceEmploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceEmploymentResponseValidationError) ErrorName() string {
	return "CreateServiceEmploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceEmploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceEmploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceEmploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceEmploymentResponseValidationError{}

// Validate checks the field values on ReadServiceEmploymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadServiceEmploymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ReadServiceEmploymentRequestValidationError is the validation error returned
// by ReadServiceEmploymentRequest.Validate if the designated constraints
// aren't met.
type ReadServiceEmploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceEmploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceEmploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceEmploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceEmploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceEmploymentRequestValidationError) ErrorName() string {
	return "ReadServiceEmploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceEmploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceEmploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceEmploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceEmploymentRequestValidationError{}

// Validate checks the field values on ReadServiceEmploymentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadServiceEmploymentResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadServiceEmploymentResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadServiceEmploymentResponseValidationError is the validation error
// returned by ReadServiceEmploymentResponse.Validate if the designated
// constraints aren't met.
type ReadServiceEmploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceEmploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceEmploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceEmploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceEmploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceEmploymentResponseValidationError) ErrorName() string {
	return "ReadServiceEmploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceEmploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceEmploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceEmploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceEmploymentResponseValidationError{}

// Validate checks the field values on UpdateServiceEmploymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateServiceEmploymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceEmploymentRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateServiceEmploymentRequestValidationError is the validation error
// returned by UpdateServiceEmploymentRequest.Validate if the designated
// constraints aren't met.
type UpdateServiceEmploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceEmploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceEmploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceEmploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceEmploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceEmploymentRequestValidationError) ErrorName() string {
	return "UpdateServiceEmploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceEmploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceEmploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceEmploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceEmploymentRequestValidationError{}

// Validate checks the field values on UpdateServiceEmploymentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateServiceEmploymentResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceEmploymentResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateServiceEmploymentResponseValidationError is the validation error
// returned by UpdateServiceEmploymentResponse.Validate if the designated
// constraints aren't met.
type UpdateServiceEmploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceEmploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceEmploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceEmploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceEmploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceEmploymentResponseValidationError) ErrorName() string {
	return "UpdateServiceEmploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceEmploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceEmploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceEmploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceEmploymentResponseValidationError{}

// Validate checks the field values on DeleteServiceEmploymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteServiceEmploymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteServiceEmploymentRequestValidationError is the validation error
// returned by DeleteServiceEmploymentRequest.Validate if the designated
// constraints aren't met.
type DeleteServiceEmploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceEmploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceEmploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceEmploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceEmploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceEmploymentRequestValidationError) ErrorName() string {
	return "DeleteServiceEmploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceEmploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceEmploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceEmploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceEmploymentRequestValidationError{}

// Validate checks the field values on DeleteServiceEmploymentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteServiceEmploymentResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteServiceEmploymentResponseValidationError is the validation error
// returned by DeleteServiceEmploymentResponse.Validate if the designated
// constraints aren't met.
type DeleteServiceEmploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceEmploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceEmploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceEmploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceEmploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceEmploymentResponseValidationError) ErrorName() string {
	return "DeleteServiceEmploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceEmploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceEmploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceEmploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceEmploymentResponseValidationError{}

// Validate checks the field values on ListServiceEmploymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceEmploymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceEmploymentRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceEmploymentRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceEmploymentRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceEmploymentRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListServiceEmploymentRequestValidationError is the validation error returned
// by ListServiceEmploymentRequest.Validate if the designated constraints
// aren't met.
type ListServiceEmploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceEmploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceEmploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceEmploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceEmploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceEmploymentRequestValidationError) ErrorName() string {
	return "ListServiceEmploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceEmploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceEmploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceEmploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceEmploymentRequestValidationError{}

// Validate checks the field values on ListServiceEmploymentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceEmploymentResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceEmploymentResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListServiceEmploymentResponseValidationError is the validation error
// returned by ListServiceEmploymentResponse.Validate if the designated
// constraints aren't met.
type ListServiceEmploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceEmploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceEmploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceEmploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceEmploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceEmploymentResponseValidationError) ErrorName() string {
	return "ListServiceEmploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceEmploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceEmploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceEmploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceEmploymentResponseValidationError{}

// Validate checks the field values on CreateServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceRequestValidationError is the validation error returned by
// CreateServiceRequest.Validate if the designated constraints aren't met.
type CreateServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceRequestValidationError) ErrorName() string {
	return "CreateServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceRequestValidationError{}

// Validate checks the field values on CreateServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServiceResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceResponseValidationError is the validation error returned by
// CreateServiceResponse.Validate if the designated constraints aren't met.
type CreateServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceResponseValidationError) ErrorName() string {
	return "CreateServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceResponseValidationError{}

// Validate checks the field values on ReadServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadServiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ReadServiceRequestValidationError is the validation error returned by
// ReadServiceRequest.Validate if the designated constraints aren't met.
type ReadServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceRequestValidationError) ErrorName() string {
	return "ReadServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceRequestValidationError{}

// Validate checks the field values on ReadServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadServiceResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadServiceResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadServiceResponseValidationError is the validation error returned by
// ReadServiceResponse.Validate if the designated constraints aren't met.
type ReadServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceResponseValidationError) ErrorName() string {
	return "ReadServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceResponseValidationError{}

// Validate checks the field values on UpdateServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateServiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateServiceRequestValidationError is the validation error returned by
// UpdateServiceRequest.Validate if the designated constraints aren't met.
type UpdateServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceRequestValidationError) ErrorName() string {
	return "UpdateServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceRequestValidationError{}

// Validate checks the field values on UpdateServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateServiceResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateServiceResponseValidationError is the validation error returned by
// UpdateServiceResponse.Validate if the designated constraints aren't met.
type UpdateServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceResponseValidationError) ErrorName() string {
	return "UpdateServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceResponseValidationError{}

// Validate checks the field values on DeleteServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteServiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteServiceRequestValidationError is the validation error returned by
// DeleteServiceRequest.Validate if the designated constraints aren't met.
type DeleteServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceRequestValidationError) ErrorName() string {
	return "DeleteServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceRequestValidationError{}

// Validate checks the field values on DeleteServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteServiceResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteServiceResponseValidationError is the validation error returned by
// DeleteServiceResponse.Validate if the designated constraints aren't met.
type DeleteServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceResponseValidationError) ErrorName() string {
	return "DeleteServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceResponseValidationError{}

// Validate checks the field values on ListServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListServiceRequestValidationError is the validation error returned by
// ListServiceRequest.Validate if the designated constraints aren't met.
type ListServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceRequestValidationError) ErrorName() string {
	return "ListServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceRequestValidationError{}

// Validate checks the field values on ListServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListServiceResponseValidationError is the validation error returned by
// ListServiceResponse.Validate if the designated constraints aren't met.
type ListServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceResponseValidationError) ErrorName() string {
	return "ListServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceResponseValidationError{}

// Validate checks the field values on ServiceSessionEvaluation with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ServiceSessionEvaluation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceSessionEvaluationValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceSessionEvaluationValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceSessionEvaluationValidationError{
				field:  "Session",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Comment

	// no validation rules for RecommendationRate

	return nil
}

// ServiceSessionEvaluationValidationError is the validation error returned by
// ServiceSessionEvaluation.Validate if the designated constraints aren't met.
type ServiceSessionEvaluationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceSessionEvaluationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceSessionEvaluationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceSessionEvaluationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceSessionEvaluationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceSessionEvaluationValidationError) ErrorName() string {
	return "ServiceSessionEvaluationValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceSessionEvaluationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceSessionEvaluation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceSessionEvaluationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceSessionEvaluationValidationError{}

// Validate checks the field values on ServiceSession with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ServiceSession) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceSessionValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceSessionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceSessionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProfileId

	if v, ok := interface{}(m.GetScheduledAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceSessionValidationError{
				field:  "ScheduledAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFinishedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceSessionValidationError{
				field:  "FinishedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOffer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceSessionValidationError{
				field:  "Offer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetNotes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceSessionValidationError{
					field:  fmt.Sprintf("Notes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	for idx, item := range m.GetEvaluations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceSessionValidationError{
					field:  fmt.Sprintf("Evaluations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ServiceSessionValidationError is the validation error returned by
// ServiceSession.Validate if the designated constraints aren't met.
type ServiceSessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceSessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceSessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceSessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceSessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceSessionValidationError) ErrorName() string { return "ServiceSessionValidationError" }

// Error satisfies the builtin error interface
func (e ServiceSessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceSessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceSessionValidationError{}

// Validate checks the field values on ServiceSessionNote with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ServiceSessionNote) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceSessionNoteValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceSessionNoteValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceSessionNoteValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceSessionNoteValidationError{
				field:  "Session",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Text

	return nil
}

// ServiceSessionNoteValidationError is the validation error returned by
// ServiceSessionNote.Validate if the designated constraints aren't met.
type ServiceSessionNoteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceSessionNoteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceSessionNoteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceSessionNoteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceSessionNoteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceSessionNoteValidationError) ErrorName() string {
	return "ServiceSessionNoteValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceSessionNoteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceSessionNote.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceSessionNoteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceSessionNoteValidationError{}

// Validate checks the field values on CreateServiceSessionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServiceSessionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceSessionRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceSessionRequestValidationError is the validation error returned
// by CreateServiceSessionRequest.Validate if the designated constraints
// aren't met.
type CreateServiceSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceSessionRequestValidationError) ErrorName() string {
	return "CreateServiceSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceSessionRequestValidationError{}

// Validate checks the field values on CreateServiceSessionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServiceSessionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceSessionResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceSessionResponseValidationError is the validation error returned
// by CreateServiceSessionResponse.Validate if the designated constraints
// aren't met.
type CreateServiceSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceSessionResponseValidationError) ErrorName() string {
	return "CreateServiceSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceSessionResponseValidationError{}

// Validate checks the field values on ReadServiceSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadServiceSessionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadServiceSessionRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadServiceSessionRequestValidationError is the validation error returned by
// ReadServiceSessionRequest.Validate if the designated constraints aren't met.
type ReadServiceSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceSessionRequestValidationError) ErrorName() string {
	return "ReadServiceSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceSessionRequestValidationError{}

// Validate checks the field values on ReadServiceSessionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadServiceSessionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadServiceSessionResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadServiceSessionResponseValidationError is the validation error returned
// by ReadServiceSessionResponse.Validate if the designated constraints aren't met.
type ReadServiceSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceSessionResponseValidationError) ErrorName() string {
	return "ReadServiceSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceSessionResponseValidationError{}

// Validate checks the field values on UpdateServiceSessionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateServiceSessionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceSessionRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateServiceSessionRequestValidationError is the validation error returned
// by UpdateServiceSessionRequest.Validate if the designated constraints
// aren't met.
type UpdateServiceSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceSessionRequestValidationError) ErrorName() string {
	return "UpdateServiceSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceSessionRequestValidationError{}

// Validate checks the field values on UpdateServiceSessionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateServiceSessionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceSessionResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateServiceSessionResponseValidationError is the validation error returned
// by UpdateServiceSessionResponse.Validate if the designated constraints
// aren't met.
type UpdateServiceSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceSessionResponseValidationError) ErrorName() string {
	return "UpdateServiceSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceSessionResponseValidationError{}

// Validate checks the field values on DeleteServiceSessionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteServiceSessionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteServiceSessionRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteServiceSessionRequestValidationError is the validation error returned
// by DeleteServiceSessionRequest.Validate if the designated constraints
// aren't met.
type DeleteServiceSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceSessionRequestValidationError) ErrorName() string {
	return "DeleteServiceSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceSessionRequestValidationError{}

// Validate checks the field values on DeleteServiceSessionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteServiceSessionResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteServiceSessionResponseValidationError is the validation error returned
// by DeleteServiceSessionResponse.Validate if the designated constraints
// aren't met.
type DeleteServiceSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceSessionResponseValidationError) ErrorName() string {
	return "DeleteServiceSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceSessionResponseValidationError{}

// Validate checks the field values on ListServiceSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceSessionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceSessionRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceSessionRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceSessionRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceSessionRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListServiceSessionRequestValidationError is the validation error returned by
// ListServiceSessionRequest.Validate if the designated constraints aren't met.
type ListServiceSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceSessionRequestValidationError) ErrorName() string {
	return "ListServiceSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceSessionRequestValidationError{}

// Validate checks the field values on ListServiceSessionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceSessionResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceSessionResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListServiceSessionResponseValidationError is the validation error returned
// by ListServiceSessionResponse.Validate if the designated constraints aren't met.
type ListServiceSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceSessionResponseValidationError) ErrorName() string {
	return "ListServiceSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceSessionResponseValidationError{}

// Validate checks the field values on ListServiceOfferSessionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceOfferSessionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceOfferSessionRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceOfferSessionRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceOfferSessionRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceOfferSessionRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListServiceOfferSessionRequestValidationError is the validation error
// returned by ListServiceOfferSessionRequest.Validate if the designated
// constraints aren't met.
type ListServiceOfferSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceOfferSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceOfferSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceOfferSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceOfferSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceOfferSessionRequestValidationError) ErrorName() string {
	return "ListServiceOfferSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceOfferSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceOfferSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceOfferSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceOfferSessionRequestValidationError{}

// Validate checks the field values on ListServiceOfferSessionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceOfferSessionResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceOfferSessionResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListServiceOfferSessionResponseValidationError is the validation error
// returned by ListServiceOfferSessionResponse.Validate if the designated
// constraints aren't met.
type ListServiceOfferSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceOfferSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceOfferSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceOfferSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceOfferSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceOfferSessionResponseValidationError) ErrorName() string {
	return "ListServiceOfferSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceOfferSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceOfferSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceOfferSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceOfferSessionResponseValidationError{}

// Validate checks the field values on CreateServiceSessionEvaluationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *CreateServiceSessionEvaluationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceSessionEvaluationRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceSessionEvaluationRequestValidationError is the validation error
// returned by CreateServiceSessionEvaluationRequest.Validate if the
// designated constraints aren't met.
type CreateServiceSessionEvaluationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceSessionEvaluationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceSessionEvaluationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceSessionEvaluationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceSessionEvaluationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceSessionEvaluationRequestValidationError) ErrorName() string {
	return "CreateServiceSessionEvaluationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceSessionEvaluationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceSessionEvaluationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceSessionEvaluationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceSessionEvaluationRequestValidationError{}

// Validate checks the field values on CreateServiceSessionEvaluationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *CreateServiceSessionEvaluationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceSessionEvaluationResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceSessionEvaluationResponseValidationError is the validation
// error returned by CreateServiceSessionEvaluationResponse.Validate if the
// designated constraints aren't met.
type CreateServiceSessionEvaluationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceSessionEvaluationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceSessionEvaluationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceSessionEvaluationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceSessionEvaluationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceSessionEvaluationResponseValidationError) ErrorName() string {
	return "CreateServiceSessionEvaluationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceSessionEvaluationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceSessionEvaluationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceSessionEvaluationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceSessionEvaluationResponseValidationError{}

// Validate checks the field values on ReadServiceSessionEvaluationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ReadServiceSessionEvaluationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ReadServiceSessionEvaluationRequestValidationError is the validation error
// returned by ReadServiceSessionEvaluationRequest.Validate if the designated
// constraints aren't met.
type ReadServiceSessionEvaluationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceSessionEvaluationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceSessionEvaluationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceSessionEvaluationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceSessionEvaluationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceSessionEvaluationRequestValidationError) ErrorName() string {
	return "ReadServiceSessionEvaluationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceSessionEvaluationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceSessionEvaluationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceSessionEvaluationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceSessionEvaluationRequestValidationError{}

// Validate checks the field values on ReadServiceSessionEvaluationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ReadServiceSessionEvaluationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadServiceSessionEvaluationResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadServiceSessionEvaluationResponseValidationError is the validation error
// returned by ReadServiceSessionEvaluationResponse.Validate if the designated
// constraints aren't met.
type ReadServiceSessionEvaluationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadServiceSessionEvaluationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadServiceSessionEvaluationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadServiceSessionEvaluationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadServiceSessionEvaluationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadServiceSessionEvaluationResponseValidationError) ErrorName() string {
	return "ReadServiceSessionEvaluationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadServiceSessionEvaluationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadServiceSessionEvaluationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadServiceSessionEvaluationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadServiceSessionEvaluationResponseValidationError{}

// Validate checks the field values on UpdateServiceSessionEvaluationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateServiceSessionEvaluationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceSessionEvaluationRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateServiceSessionEvaluationRequestValidationError is the validation error
// returned by UpdateServiceSessionEvaluationRequest.Validate if the
// designated constraints aren't met.
type UpdateServiceSessionEvaluationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceSessionEvaluationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceSessionEvaluationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceSessionEvaluationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceSessionEvaluationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceSessionEvaluationRequestValidationError) ErrorName() string {
	return "UpdateServiceSessionEvaluationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceSessionEvaluationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceSessionEvaluationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceSessionEvaluationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceSessionEvaluationRequestValidationError{}

// Validate checks the field values on UpdateServiceSessionEvaluationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateServiceSessionEvaluationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateServiceSessionEvaluationResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateServiceSessionEvaluationResponseValidationError is the validation
// error returned by UpdateServiceSessionEvaluationResponse.Validate if the
// designated constraints aren't met.
type UpdateServiceSessionEvaluationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceSessionEvaluationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceSessionEvaluationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceSessionEvaluationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceSessionEvaluationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceSessionEvaluationResponseValidationError) ErrorName() string {
	return "UpdateServiceSessionEvaluationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceSessionEvaluationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceSessionEvaluationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceSessionEvaluationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceSessionEvaluationResponseValidationError{}

// Validate checks the field values on DeleteServiceSessionEvaluationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *DeleteServiceSessionEvaluationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteServiceSessionEvaluationRequestValidationError is the validation error
// returned by DeleteServiceSessionEvaluationRequest.Validate if the
// designated constraints aren't met.
type DeleteServiceSessionEvaluationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceSessionEvaluationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceSessionEvaluationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceSessionEvaluationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceSessionEvaluationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceSessionEvaluationRequestValidationError) ErrorName() string {
	return "DeleteServiceSessionEvaluationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceSessionEvaluationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceSessionEvaluationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceSessionEvaluationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceSessionEvaluationRequestValidationError{}

// Validate checks the field values on DeleteServiceSessionEvaluationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *DeleteServiceSessionEvaluationResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteServiceSessionEvaluationResponseValidationError is the validation
// error returned by DeleteServiceSessionEvaluationResponse.Validate if the
// designated constraints aren't met.
type DeleteServiceSessionEvaluationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceSessionEvaluationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceSessionEvaluationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceSessionEvaluationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceSessionEvaluationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceSessionEvaluationResponseValidationError) ErrorName() string {
	return "DeleteServiceSessionEvaluationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceSessionEvaluationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceSessionEvaluationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceSessionEvaluationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceSessionEvaluationResponseValidationError{}

// Validate checks the field values on ListServiceSessionEvaluationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListServiceSessionEvaluationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceSessionEvaluationRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceSessionEvaluationRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceSessionEvaluationRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceSessionEvaluationRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListServiceSessionEvaluationRequestValidationError is the validation error
// returned by ListServiceSessionEvaluationRequest.Validate if the designated
// constraints aren't met.
type ListServiceSessionEvaluationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceSessionEvaluationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceSessionEvaluationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceSessionEvaluationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceSessionEvaluationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceSessionEvaluationRequestValidationError) ErrorName() string {
	return "ListServiceSessionEvaluationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceSessionEvaluationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceSessionEvaluationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceSessionEvaluationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceSessionEvaluationRequestValidationError{}

// Validate checks the field values on ListServiceSessionEvaluationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListServiceSessionEvaluationResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceSessionEvaluationResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListServiceSessionEvaluationResponseValidationError is the validation error
// returned by ListServiceSessionEvaluationResponse.Validate if the designated
// constraints aren't met.
type ListServiceSessionEvaluationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceSessionEvaluationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceSessionEvaluationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceSessionEvaluationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceSessionEvaluationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceSessionEvaluationResponseValidationError) ErrorName() string {
	return "ListServiceSessionEvaluationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceSessionEvaluationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceSessionEvaluationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceSessionEvaluationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceSessionEvaluationResponseValidationError{}

// Validate checks the field values on StreamSessionInputEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StreamSessionInputEvent) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Event.(type) {

	case *StreamSessionInputEvent_RequestSession:

		if v, ok := interface{}(m.GetRequestSession()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamSessionInputEventValidationError{
					field:  "RequestSession",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamSessionInputEvent_JoinSession:

		if v, ok := interface{}(m.GetJoinSession()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamSessionInputEventValidationError{
					field:  "JoinSession",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamSessionInputEvent_LeaveSession:

		if v, ok := interface{}(m.GetLeaveSession()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamSessionInputEventValidationError{
					field:  "LeaveSession",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// StreamSessionInputEventValidationError is the validation error returned by
// StreamSessionInputEvent.Validate if the designated constraints aren't met.
type StreamSessionInputEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamSessionInputEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamSessionInputEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamSessionInputEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamSessionInputEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamSessionInputEventValidationError) ErrorName() string {
	return "StreamSessionInputEventValidationError"
}

// Error satisfies the builtin error interface
func (e StreamSessionInputEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamSessionInputEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamSessionInputEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamSessionInputEventValidationError{}

// Validate checks the field values on EventRequestSession with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EventRequestSession) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventRequestSessionValidationError{
				field:  "Session",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventRequestSessionValidationError is the validation error returned by
// EventRequestSession.Validate if the designated constraints aren't met.
type EventRequestSessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventRequestSessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventRequestSessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventRequestSessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventRequestSessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventRequestSessionValidationError) ErrorName() string {
	return "EventRequestSessionValidationError"
}

// Error satisfies the builtin error interface
func (e EventRequestSessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventRequestSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventRequestSessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventRequestSessionValidationError{}

// Validate checks the field values on EventJoinSession with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EventJoinSession) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventJoinSessionValidationError{
				field:  "Session",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventJoinSessionValidationError is the validation error returned by
// EventJoinSession.Validate if the designated constraints aren't met.
type EventJoinSessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventJoinSessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventJoinSessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventJoinSessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventJoinSessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventJoinSessionValidationError) ErrorName() string { return "EventJoinSessionValidationError" }

// Error satisfies the builtin error interface
func (e EventJoinSessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventJoinSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventJoinSessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventJoinSessionValidationError{}

// Validate checks the field values on EventLeaveSession with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EventLeaveSession) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventLeaveSessionValidationError{
				field:  "Session",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventLeaveSessionValidationError is the validation error returned by
// EventLeaveSession.Validate if the designated constraints aren't met.
type EventLeaveSessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventLeaveSessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventLeaveSessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventLeaveSessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventLeaveSessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventLeaveSessionValidationError) ErrorName() string {
	return "EventLeaveSessionValidationError"
}

// Error satisfies the builtin error interface
func (e EventLeaveSessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventLeaveSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventLeaveSessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventLeaveSessionValidationError{}

// Validate checks the field values on StreamSessionOutputEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StreamSessionOutputEvent) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Event.(type) {

	case *StreamSessionOutputEvent_SessionRequested:

		if v, ok := interface{}(m.GetSessionRequested()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamSessionOutputEventValidationError{
					field:  "SessionRequested",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamSessionOutputEvent_SessionStarted:

		if v, ok := interface{}(m.GetSessionStarted()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamSessionOutputEventValidationError{
					field:  "SessionStarted",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamSessionOutputEvent_SessionTimeout:

		if v, ok := interface{}(m.GetSessionTimeout()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamSessionOutputEventValidationError{
					field:  "SessionTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamSessionOutputEvent_SessionFinished:

		if v, ok := interface{}(m.GetSessionFinished()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamSessionOutputEventValidationError{
					field:  "SessionFinished",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// StreamSessionOutputEventValidationError is the validation error returned by
// StreamSessionOutputEvent.Validate if the designated constraints aren't met.
type StreamSessionOutputEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamSessionOutputEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamSessionOutputEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamSessionOutputEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamSessionOutputEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamSessionOutputEventValidationError) ErrorName() string {
	return "StreamSessionOutputEventValidationError"
}

// Error satisfies the builtin error interface
func (e StreamSessionOutputEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamSessionOutputEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamSessionOutputEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamSessionOutputEventValidationError{}

// Validate checks the field values on EventSessionRequested with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EventSessionRequested) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventSessionRequestedValidationError{
				field:  "Session",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventSessionRequestedValidationError is the validation error returned by
// EventSessionRequested.Validate if the designated constraints aren't met.
type EventSessionRequestedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventSessionRequestedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventSessionRequestedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventSessionRequestedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventSessionRequestedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventSessionRequestedValidationError) ErrorName() string {
	return "EventSessionRequestedValidationError"
}

// Error satisfies the builtin error interface
func (e EventSessionRequestedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventSessionRequested.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventSessionRequestedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventSessionRequestedValidationError{}

// Validate checks the field values on EventSessionStarted with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EventSessionStarted) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventSessionStartedValidationError{
				field:  "Session",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventSessionStartedValidationError is the validation error returned by
// EventSessionStarted.Validate if the designated constraints aren't met.
type EventSessionStartedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventSessionStartedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventSessionStartedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventSessionStartedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventSessionStartedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventSessionStartedValidationError) ErrorName() string {
	return "EventSessionStartedValidationError"
}

// Error satisfies the builtin error interface
func (e EventSessionStartedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventSessionStarted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventSessionStartedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventSessionStartedValidationError{}

// Validate checks the field values on EventSessionTimeout with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EventSessionTimeout) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventSessionTimeoutValidationError{
				field:  "Session",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventSessionTimeoutValidationError is the validation error returned by
// EventSessionTimeout.Validate if the designated constraints aren't met.
type EventSessionTimeoutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventSessionTimeoutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventSessionTimeoutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventSessionTimeoutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventSessionTimeoutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventSessionTimeoutValidationError) ErrorName() string {
	return "EventSessionTimeoutValidationError"
}

// Error satisfies the builtin error interface
func (e EventSessionTimeoutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventSessionTimeout.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventSessionTimeoutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventSessionTimeoutValidationError{}

// Validate checks the field values on EventSessionFinished with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EventSessionFinished) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventSessionFinishedValidationError{
				field:  "Session",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventSessionFinishedValidationError is the validation error returned by
// EventSessionFinished.Validate if the designated constraints aren't met.
type EventSessionFinishedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventSessionFinishedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventSessionFinishedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventSessionFinishedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventSessionFinishedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventSessionFinishedValidationError) ErrorName() string {
	return "EventSessionFinishedValidationError"
}

// Error satisfies the builtin error interface
func (e EventSessionFinishedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventSessionFinished.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventSessionFinishedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventSessionFinishedValidationError{}

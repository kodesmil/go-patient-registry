// Code generated by protoc-gen-validate
// source: github.com/kodesmil/ks-model/health.proto
// DO NOT EDIT!!!

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on HealthMenstruationPersonalInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HealthMenstruationPersonalInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HealthMenstruationPersonalInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HealthMenstruationPersonalInfoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProfileId

	// no validation rules for PeriodLengthInDays

	// no validation rules for CycleLengthInDays

	return nil
}

// HealthMenstruationPersonalInfoValidationError is the validation error
// returned by HealthMenstruationPersonalInfo.Validate if the designated
// constraints aren't met.
type HealthMenstruationPersonalInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthMenstruationPersonalInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthMenstruationPersonalInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthMenstruationPersonalInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthMenstruationPersonalInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthMenstruationPersonalInfoValidationError) ErrorName() string {
	return "HealthMenstruationPersonalInfoValidationError"
}

// Error satisfies the builtin error interface
func (e HealthMenstruationPersonalInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthMenstruationPersonalInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthMenstruationPersonalInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthMenstruationPersonalInfoValidationError{}

// Validate checks the field values on HealthMenstruationDailyEntry with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HealthMenstruationDailyEntry) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HealthMenstruationDailyEntryValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HealthMenstruationDailyEntryValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProfileId

	if v, ok := interface{}(m.GetDay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HealthMenstruationDailyEntryValidationError{
				field:  "Day",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IntensityPercentage

	// no validation rules for Type

	// no validation rules for Manual

	// no validation rules for BasedOnPrediction

	return nil
}

// HealthMenstruationDailyEntryValidationError is the validation error returned
// by HealthMenstruationDailyEntry.Validate if the designated constraints
// aren't met.
type HealthMenstruationDailyEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthMenstruationDailyEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthMenstruationDailyEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthMenstruationDailyEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthMenstruationDailyEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthMenstruationDailyEntryValidationError) ErrorName() string {
	return "HealthMenstruationDailyEntryValidationError"
}

// Error satisfies the builtin error interface
func (e HealthMenstruationDailyEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthMenstruationDailyEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthMenstruationDailyEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthMenstruationDailyEntryValidationError{}

// Validate checks the field values on
// CreateHealthMenstruationDailyEntryRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CreateHealthMenstruationDailyEntryRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateHealthMenstruationDailyEntryRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateHealthMenstruationDailyEntryRequestValidationError is the validation
// error returned by CreateHealthMenstruationDailyEntryRequest.Validate if the
// designated constraints aren't met.
type CreateHealthMenstruationDailyEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHealthMenstruationDailyEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHealthMenstruationDailyEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHealthMenstruationDailyEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHealthMenstruationDailyEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHealthMenstruationDailyEntryRequestValidationError) ErrorName() string {
	return "CreateHealthMenstruationDailyEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHealthMenstruationDailyEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHealthMenstruationDailyEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHealthMenstruationDailyEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHealthMenstruationDailyEntryRequestValidationError{}

// Validate checks the field values on
// CreateHealthMenstruationDailyEntryResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CreateHealthMenstruationDailyEntryResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateHealthMenstruationDailyEntryResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateHealthMenstruationDailyEntryResponseValidationError is the validation
// error returned by CreateHealthMenstruationDailyEntryResponse.Validate if
// the designated constraints aren't met.
type CreateHealthMenstruationDailyEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHealthMenstruationDailyEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHealthMenstruationDailyEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHealthMenstruationDailyEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHealthMenstruationDailyEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHealthMenstruationDailyEntryResponseValidationError) ErrorName() string {
	return "CreateHealthMenstruationDailyEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHealthMenstruationDailyEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHealthMenstruationDailyEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHealthMenstruationDailyEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHealthMenstruationDailyEntryResponseValidationError{}

// Validate checks the field values on ReadHealthMenstruationDailyEntryRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ReadHealthMenstruationDailyEntryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ReadHealthMenstruationDailyEntryRequestValidationError is the validation
// error returned by ReadHealthMenstruationDailyEntryRequest.Validate if the
// designated constraints aren't met.
type ReadHealthMenstruationDailyEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadHealthMenstruationDailyEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadHealthMenstruationDailyEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadHealthMenstruationDailyEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadHealthMenstruationDailyEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadHealthMenstruationDailyEntryRequestValidationError) ErrorName() string {
	return "ReadHealthMenstruationDailyEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadHealthMenstruationDailyEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadHealthMenstruationDailyEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadHealthMenstruationDailyEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadHealthMenstruationDailyEntryRequestValidationError{}

// Validate checks the field values on ReadHealthMenstruationDailyEntryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ReadHealthMenstruationDailyEntryResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadHealthMenstruationDailyEntryResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadHealthMenstruationDailyEntryResponseValidationError is the validation
// error returned by ReadHealthMenstruationDailyEntryResponse.Validate if the
// designated constraints aren't met.
type ReadHealthMenstruationDailyEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadHealthMenstruationDailyEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadHealthMenstruationDailyEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadHealthMenstruationDailyEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadHealthMenstruationDailyEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadHealthMenstruationDailyEntryResponseValidationError) ErrorName() string {
	return "ReadHealthMenstruationDailyEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadHealthMenstruationDailyEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadHealthMenstruationDailyEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadHealthMenstruationDailyEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadHealthMenstruationDailyEntryResponseValidationError{}

// Validate checks the field values on
// UpdateHealthMenstruationDailyEntryRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UpdateHealthMenstruationDailyEntryRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateHealthMenstruationDailyEntryRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateHealthMenstruationDailyEntryRequestValidationError is the validation
// error returned by UpdateHealthMenstruationDailyEntryRequest.Validate if the
// designated constraints aren't met.
type UpdateHealthMenstruationDailyEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHealthMenstruationDailyEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHealthMenstruationDailyEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHealthMenstruationDailyEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHealthMenstruationDailyEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHealthMenstruationDailyEntryRequestValidationError) ErrorName() string {
	return "UpdateHealthMenstruationDailyEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHealthMenstruationDailyEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHealthMenstruationDailyEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHealthMenstruationDailyEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHealthMenstruationDailyEntryRequestValidationError{}

// Validate checks the field values on
// UpdateHealthMenstruationDailyEntryResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UpdateHealthMenstruationDailyEntryResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateHealthMenstruationDailyEntryResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateHealthMenstruationDailyEntryResponseValidationError is the validation
// error returned by UpdateHealthMenstruationDailyEntryResponse.Validate if
// the designated constraints aren't met.
type UpdateHealthMenstruationDailyEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHealthMenstruationDailyEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHealthMenstruationDailyEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHealthMenstruationDailyEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHealthMenstruationDailyEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHealthMenstruationDailyEntryResponseValidationError) ErrorName() string {
	return "UpdateHealthMenstruationDailyEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHealthMenstruationDailyEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHealthMenstruationDailyEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHealthMenstruationDailyEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHealthMenstruationDailyEntryResponseValidationError{}

// Validate checks the field values on
// DeleteHealthMenstruationDailyEntryRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DeleteHealthMenstruationDailyEntryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteHealthMenstruationDailyEntryRequestValidationError is the validation
// error returned by DeleteHealthMenstruationDailyEntryRequest.Validate if the
// designated constraints aren't met.
type DeleteHealthMenstruationDailyEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHealthMenstruationDailyEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHealthMenstruationDailyEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHealthMenstruationDailyEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHealthMenstruationDailyEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHealthMenstruationDailyEntryRequestValidationError) ErrorName() string {
	return "DeleteHealthMenstruationDailyEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHealthMenstruationDailyEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHealthMenstruationDailyEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHealthMenstruationDailyEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHealthMenstruationDailyEntryRequestValidationError{}

// Validate checks the field values on
// DeleteHealthMenstruationDailyEntryResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DeleteHealthMenstruationDailyEntryResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteHealthMenstruationDailyEntryResponseValidationError is the validation
// error returned by DeleteHealthMenstruationDailyEntryResponse.Validate if
// the designated constraints aren't met.
type DeleteHealthMenstruationDailyEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHealthMenstruationDailyEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHealthMenstruationDailyEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHealthMenstruationDailyEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHealthMenstruationDailyEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHealthMenstruationDailyEntryResponseValidationError) ErrorName() string {
	return "DeleteHealthMenstruationDailyEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHealthMenstruationDailyEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHealthMenstruationDailyEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHealthMenstruationDailyEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHealthMenstruationDailyEntryResponseValidationError{}

// Validate checks the field values on ListHealthMenstruationDailyEntryRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListHealthMenstruationDailyEntryRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListHealthMenstruationDailyEntryRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListHealthMenstruationDailyEntryRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListHealthMenstruationDailyEntryRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListHealthMenstruationDailyEntryRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListHealthMenstruationDailyEntryRequestValidationError is the validation
// error returned by ListHealthMenstruationDailyEntryRequest.Validate if the
// designated constraints aren't met.
type ListHealthMenstruationDailyEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHealthMenstruationDailyEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHealthMenstruationDailyEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHealthMenstruationDailyEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHealthMenstruationDailyEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHealthMenstruationDailyEntryRequestValidationError) ErrorName() string {
	return "ListHealthMenstruationDailyEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListHealthMenstruationDailyEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHealthMenstruationDailyEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHealthMenstruationDailyEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHealthMenstruationDailyEntryRequestValidationError{}

// Validate checks the field values on ListHealthMenstruationDailyEntryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListHealthMenstruationDailyEntryResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListHealthMenstruationDailyEntryResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListHealthMenstruationDailyEntryResponseValidationError is the validation
// error returned by ListHealthMenstruationDailyEntryResponse.Validate if the
// designated constraints aren't met.
type ListHealthMenstruationDailyEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHealthMenstruationDailyEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHealthMenstruationDailyEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHealthMenstruationDailyEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHealthMenstruationDailyEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHealthMenstruationDailyEntryResponseValidationError) ErrorName() string {
	return "ListHealthMenstruationDailyEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListHealthMenstruationDailyEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHealthMenstruationDailyEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHealthMenstruationDailyEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHealthMenstruationDailyEntryResponseValidationError{}

// Validate checks the field values on
// CreateHealthMenstruationPersonalInfoRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CreateHealthMenstruationPersonalInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateHealthMenstruationPersonalInfoRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateHealthMenstruationPersonalInfoRequestValidationError is the validation
// error returned by CreateHealthMenstruationPersonalInfoRequest.Validate if
// the designated constraints aren't met.
type CreateHealthMenstruationPersonalInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHealthMenstruationPersonalInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHealthMenstruationPersonalInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHealthMenstruationPersonalInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHealthMenstruationPersonalInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHealthMenstruationPersonalInfoRequestValidationError) ErrorName() string {
	return "CreateHealthMenstruationPersonalInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHealthMenstruationPersonalInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHealthMenstruationPersonalInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHealthMenstruationPersonalInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHealthMenstruationPersonalInfoRequestValidationError{}

// Validate checks the field values on
// CreateHealthMenstruationPersonalInfoResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CreateHealthMenstruationPersonalInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateHealthMenstruationPersonalInfoResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateHealthMenstruationPersonalInfoResponseValidationError is the
// validation error returned by
// CreateHealthMenstruationPersonalInfoResponse.Validate if the designated
// constraints aren't met.
type CreateHealthMenstruationPersonalInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHealthMenstruationPersonalInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHealthMenstruationPersonalInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHealthMenstruationPersonalInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHealthMenstruationPersonalInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHealthMenstruationPersonalInfoResponseValidationError) ErrorName() string {
	return "CreateHealthMenstruationPersonalInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHealthMenstruationPersonalInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHealthMenstruationPersonalInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHealthMenstruationPersonalInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHealthMenstruationPersonalInfoResponseValidationError{}

// Validate checks the field values on
// ReadHealthMenstruationPersonalInfoRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ReadHealthMenstruationPersonalInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ReadHealthMenstruationPersonalInfoRequestValidationError is the validation
// error returned by ReadHealthMenstruationPersonalInfoRequest.Validate if the
// designated constraints aren't met.
type ReadHealthMenstruationPersonalInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadHealthMenstruationPersonalInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadHealthMenstruationPersonalInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadHealthMenstruationPersonalInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadHealthMenstruationPersonalInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadHealthMenstruationPersonalInfoRequestValidationError) ErrorName() string {
	return "ReadHealthMenstruationPersonalInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadHealthMenstruationPersonalInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadHealthMenstruationPersonalInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadHealthMenstruationPersonalInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadHealthMenstruationPersonalInfoRequestValidationError{}

// Validate checks the field values on
// ReadHealthMenstruationPersonalInfoResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ReadHealthMenstruationPersonalInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadHealthMenstruationPersonalInfoResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadHealthMenstruationPersonalInfoResponseValidationError is the validation
// error returned by ReadHealthMenstruationPersonalInfoResponse.Validate if
// the designated constraints aren't met.
type ReadHealthMenstruationPersonalInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadHealthMenstruationPersonalInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadHealthMenstruationPersonalInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadHealthMenstruationPersonalInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadHealthMenstruationPersonalInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadHealthMenstruationPersonalInfoResponseValidationError) ErrorName() string {
	return "ReadHealthMenstruationPersonalInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadHealthMenstruationPersonalInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadHealthMenstruationPersonalInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadHealthMenstruationPersonalInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadHealthMenstruationPersonalInfoResponseValidationError{}

// Validate checks the field values on
// UpdateHealthMenstruationPersonalInfoRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UpdateHealthMenstruationPersonalInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateHealthMenstruationPersonalInfoRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateHealthMenstruationPersonalInfoRequestValidationError is the validation
// error returned by UpdateHealthMenstruationPersonalInfoRequest.Validate if
// the designated constraints aren't met.
type UpdateHealthMenstruationPersonalInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHealthMenstruationPersonalInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHealthMenstruationPersonalInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHealthMenstruationPersonalInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHealthMenstruationPersonalInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHealthMenstruationPersonalInfoRequestValidationError) ErrorName() string {
	return "UpdateHealthMenstruationPersonalInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHealthMenstruationPersonalInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHealthMenstruationPersonalInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHealthMenstruationPersonalInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHealthMenstruationPersonalInfoRequestValidationError{}

// Validate checks the field values on
// UpdateHealthMenstruationPersonalInfoResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UpdateHealthMenstruationPersonalInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateHealthMenstruationPersonalInfoResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateHealthMenstruationPersonalInfoResponseValidationError is the
// validation error returned by
// UpdateHealthMenstruationPersonalInfoResponse.Validate if the designated
// constraints aren't met.
type UpdateHealthMenstruationPersonalInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHealthMenstruationPersonalInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHealthMenstruationPersonalInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHealthMenstruationPersonalInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHealthMenstruationPersonalInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHealthMenstruationPersonalInfoResponseValidationError) ErrorName() string {
	return "UpdateHealthMenstruationPersonalInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHealthMenstruationPersonalInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHealthMenstruationPersonalInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHealthMenstruationPersonalInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHealthMenstruationPersonalInfoResponseValidationError{}

// Validate checks the field values on
// DeleteHealthMenstruationPersonalInfoRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DeleteHealthMenstruationPersonalInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteHealthMenstruationPersonalInfoRequestValidationError is the validation
// error returned by DeleteHealthMenstruationPersonalInfoRequest.Validate if
// the designated constraints aren't met.
type DeleteHealthMenstruationPersonalInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHealthMenstruationPersonalInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHealthMenstruationPersonalInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHealthMenstruationPersonalInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHealthMenstruationPersonalInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHealthMenstruationPersonalInfoRequestValidationError) ErrorName() string {
	return "DeleteHealthMenstruationPersonalInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHealthMenstruationPersonalInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHealthMenstruationPersonalInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHealthMenstruationPersonalInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHealthMenstruationPersonalInfoRequestValidationError{}

// Validate checks the field values on
// DeleteHealthMenstruationPersonalInfoResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DeleteHealthMenstruationPersonalInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteHealthMenstruationPersonalInfoResponseValidationError is the
// validation error returned by
// DeleteHealthMenstruationPersonalInfoResponse.Validate if the designated
// constraints aren't met.
type DeleteHealthMenstruationPersonalInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHealthMenstruationPersonalInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHealthMenstruationPersonalInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHealthMenstruationPersonalInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHealthMenstruationPersonalInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHealthMenstruationPersonalInfoResponseValidationError) ErrorName() string {
	return "DeleteHealthMenstruationPersonalInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHealthMenstruationPersonalInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHealthMenstruationPersonalInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHealthMenstruationPersonalInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHealthMenstruationPersonalInfoResponseValidationError{}

// Validate checks the field values on
// ListHealthMenstruationPersonalInfoRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ListHealthMenstruationPersonalInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListHealthMenstruationPersonalInfoRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListHealthMenstruationPersonalInfoRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListHealthMenstruationPersonalInfoRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListHealthMenstruationPersonalInfoRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListHealthMenstruationPersonalInfoRequestValidationError is the validation
// error returned by ListHealthMenstruationPersonalInfoRequest.Validate if the
// designated constraints aren't met.
type ListHealthMenstruationPersonalInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHealthMenstruationPersonalInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHealthMenstruationPersonalInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHealthMenstruationPersonalInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHealthMenstruationPersonalInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHealthMenstruationPersonalInfoRequestValidationError) ErrorName() string {
	return "ListHealthMenstruationPersonalInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListHealthMenstruationPersonalInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHealthMenstruationPersonalInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHealthMenstruationPersonalInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHealthMenstruationPersonalInfoRequestValidationError{}

// Validate checks the field values on
// ListHealthMenstruationPersonalInfoResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ListHealthMenstruationPersonalInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListHealthMenstruationPersonalInfoResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListHealthMenstruationPersonalInfoResponseValidationError is the validation
// error returned by ListHealthMenstruationPersonalInfoResponse.Validate if
// the designated constraints aren't met.
type ListHealthMenstruationPersonalInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHealthMenstruationPersonalInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHealthMenstruationPersonalInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHealthMenstruationPersonalInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHealthMenstruationPersonalInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHealthMenstruationPersonalInfoResponseValidationError) ErrorName() string {
	return "ListHealthMenstruationPersonalInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListHealthMenstruationPersonalInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHealthMenstruationPersonalInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHealthMenstruationPersonalInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHealthMenstruationPersonalInfoResponseValidationError{}

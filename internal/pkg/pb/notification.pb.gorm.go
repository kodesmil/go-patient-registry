// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/kodesmil/ks-model/notification.proto

// Generated with protoc-gen-gorm version: master
// Anticipating compatibility with atlas-app-toolkit version: master

package pb

import context "context"
import fmt "fmt"
import time "time"

import errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
import field_mask1 "google.golang.org/genproto/protobuf/field_mask"
import gorm1 "github.com/jinzhu/gorm"
import gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
import json1 "encoding/json"
import ptypes1 "github.com/golang/protobuf/ptypes"
import query1 "github.com/infobloxopen/atlas-app-toolkit/query"
import trace1 "go.opencensus.io/trace"

import math "math"
import _ "google.golang.org/genproto/protobuf/field_mask"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/envoyproxy/protoc-gen-validate/validate"
import _ "github.com/infobloxopen/atlas-app-toolkit/query"
import _ "github.com/infobloxopen/atlas-app-toolkit/rpc/resource"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type NotificationSettingORM struct {
	CreatedAt             *time.Time
	CronJournalReminder   string
	EnableJournalReminder bool
	EnableNotifications   bool
	Id                    uint64 `gorm:"type:serial;primary_key"`
	ProfileId             string
	UpdatedAt             *time.Time
}

// TableName overrides the default tablename generated by GORM
func (NotificationSettingORM) TableName() string {
	return "notification_settings"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *NotificationSetting) ToORM(ctx context.Context) (NotificationSettingORM, error) {
	to := NotificationSettingORM{}
	var err error
	if prehook, ok := interface{}(m).(NotificationSettingWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.CreatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.CreatedAt); err != nil {
			return to, err
		}
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.UpdatedAt); err != nil {
			return to, err
		}
		to.UpdatedAt = &t
	}
	to.ProfileId = m.ProfileId
	to.EnableNotifications = m.EnableNotifications
	to.EnableJournalReminder = m.EnableJournalReminder
	to.CronJournalReminder = m.CronJournalReminder
	if posthook, ok := interface{}(m).(NotificationSettingWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *NotificationSettingORM) ToPB(ctx context.Context) (NotificationSetting, error) {
	to := NotificationSetting{}
	var err error
	if prehook, ok := interface{}(m).(NotificationSettingWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.CreatedAt != nil {
		if to.CreatedAt, err = ptypes1.TimestampProto(*m.CreatedAt); err != nil {
			return to, err
		}
	}
	if m.UpdatedAt != nil {
		if to.UpdatedAt, err = ptypes1.TimestampProto(*m.UpdatedAt); err != nil {
			return to, err
		}
	}
	to.ProfileId = m.ProfileId
	to.EnableNotifications = m.EnableNotifications
	to.EnableJournalReminder = m.EnableJournalReminder
	to.CronJournalReminder = m.CronJournalReminder
	if posthook, ok := interface{}(m).(NotificationSettingWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type NotificationSetting the arg will be the target, the caller the one being converted from

// NotificationSettingBeforeToORM called before default ToORM code
type NotificationSettingWithBeforeToORM interface {
	BeforeToORM(context.Context, *NotificationSettingORM) error
}

// NotificationSettingAfterToORM called after default ToORM code
type NotificationSettingWithAfterToORM interface {
	AfterToORM(context.Context, *NotificationSettingORM) error
}

// NotificationSettingBeforeToPB called before default ToPB code
type NotificationSettingWithBeforeToPB interface {
	BeforeToPB(context.Context, *NotificationSetting) error
}

// NotificationSettingAfterToPB called after default ToPB code
type NotificationSettingWithAfterToPB interface {
	AfterToPB(context.Context, *NotificationSetting) error
}

type NotificationDeviceORM struct {
	CreatedAt   *time.Time
	DeviceToken string `gorm:"unique"`
	Id          uint64 `gorm:"type:serial;primary_key"`
	ProfileId   string
	UpdatedAt   *time.Time
}

// TableName overrides the default tablename generated by GORM
func (NotificationDeviceORM) TableName() string {
	return "notification_devices"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *NotificationDevice) ToORM(ctx context.Context) (NotificationDeviceORM, error) {
	to := NotificationDeviceORM{}
	var err error
	if prehook, ok := interface{}(m).(NotificationDeviceWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.CreatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.CreatedAt); err != nil {
			return to, err
		}
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.UpdatedAt); err != nil {
			return to, err
		}
		to.UpdatedAt = &t
	}
	to.ProfileId = m.ProfileId
	to.DeviceToken = m.DeviceToken
	if posthook, ok := interface{}(m).(NotificationDeviceWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *NotificationDeviceORM) ToPB(ctx context.Context) (NotificationDevice, error) {
	to := NotificationDevice{}
	var err error
	if prehook, ok := interface{}(m).(NotificationDeviceWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.CreatedAt != nil {
		if to.CreatedAt, err = ptypes1.TimestampProto(*m.CreatedAt); err != nil {
			return to, err
		}
	}
	if m.UpdatedAt != nil {
		if to.UpdatedAt, err = ptypes1.TimestampProto(*m.UpdatedAt); err != nil {
			return to, err
		}
	}
	to.ProfileId = m.ProfileId
	to.DeviceToken = m.DeviceToken
	if posthook, ok := interface{}(m).(NotificationDeviceWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type NotificationDevice the arg will be the target, the caller the one being converted from

// NotificationDeviceBeforeToORM called before default ToORM code
type NotificationDeviceWithBeforeToORM interface {
	BeforeToORM(context.Context, *NotificationDeviceORM) error
}

// NotificationDeviceAfterToORM called after default ToORM code
type NotificationDeviceWithAfterToORM interface {
	AfterToORM(context.Context, *NotificationDeviceORM) error
}

// NotificationDeviceBeforeToPB called before default ToPB code
type NotificationDeviceWithBeforeToPB interface {
	BeforeToPB(context.Context, *NotificationDevice) error
}

// NotificationDeviceAfterToPB called after default ToPB code
type NotificationDeviceWithAfterToPB interface {
	AfterToPB(context.Context, *NotificationDevice) error
}

// DefaultCreateNotificationSetting executes a basic gorm create call
func DefaultCreateNotificationSetting(ctx context.Context, in *NotificationSetting, db *gorm1.DB) (*NotificationSetting, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NotificationSettingORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NotificationSettingORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type NotificationSettingORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationSettingORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadNotificationSetting executes a basic gorm read call
func DefaultReadNotificationSetting(ctx context.Context, in *NotificationSetting, db *gorm1.DB) (*NotificationSetting, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(NotificationSettingORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &NotificationSettingORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NotificationSettingORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := NotificationSettingORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(NotificationSettingORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type NotificationSettingORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationSettingORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationSettingORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteNotificationSetting(ctx context.Context, in *NotificationSetting, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(NotificationSettingORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&NotificationSettingORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(NotificationSettingORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type NotificationSettingORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationSettingORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteNotificationSettingSet(ctx context.Context, in []*NotificationSetting, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors1.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&NotificationSettingORM{})).(NotificationSettingORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&NotificationSettingORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&NotificationSettingORM{})).(NotificationSettingORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type NotificationSettingORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*NotificationSetting, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationSettingORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*NotificationSetting, *gorm1.DB) error
}

// DefaultStrictUpdateNotificationSetting clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateNotificationSetting(ctx context.Context, in *NotificationSetting, db *gorm1.DB) (*NotificationSetting, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateNotificationSetting")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &NotificationSettingORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(NotificationSettingORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(NotificationSettingORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NotificationSettingORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type NotificationSettingORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationSettingORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationSettingORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchNotificationSetting executes a basic gorm update call with patch behavior
func DefaultPatchNotificationSetting(ctx context.Context, in *NotificationSetting, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*NotificationSetting, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	var pbObj NotificationSetting
	var err error
	if hook, ok := interface{}(&pbObj).(NotificationSettingWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadNotificationSetting(ctx, &NotificationSetting{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(NotificationSettingWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskNotificationSetting(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(NotificationSettingWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateNotificationSetting(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(NotificationSettingWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type NotificationSettingWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *NotificationSetting, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationSettingWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *NotificationSetting, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationSettingWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *NotificationSetting, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationSettingWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *NotificationSetting, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultPatchSetNotificationSetting executes a bulk gorm update call with patch behavior
func DefaultPatchSetNotificationSetting(ctx context.Context, objects []*NotificationSetting, updateMasks []*field_mask1.FieldMask, db *gorm1.DB) ([]*NotificationSetting, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors1.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*NotificationSetting, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchNotificationSetting(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskNotificationSetting patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskNotificationSetting(ctx context.Context, patchee *NotificationSetting, patcher *NotificationSetting, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*NotificationSetting, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"CreatedAt" {
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if f == prefix+"UpdatedAt" {
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"ProfileId" {
			patchee.ProfileId = patcher.ProfileId
			continue
		}
		if f == prefix+"EnableNotifications" {
			patchee.EnableNotifications = patcher.EnableNotifications
			continue
		}
		if f == prefix+"EnableJournalReminder" {
			patchee.EnableJournalReminder = patcher.EnableJournalReminder
			continue
		}
		if f == prefix+"CronJournalReminder" {
			patchee.CronJournalReminder = patcher.CronJournalReminder
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListNotificationSetting executes a gorm list call
func DefaultListNotificationSetting(ctx context.Context, db *gorm1.DB, f *query1.Filtering, s *query1.Sorting, p *query1.Pagination, fs *query1.FieldSelection) ([]*NotificationSetting, error) {
	in := NotificationSetting{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NotificationSettingORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db, f, s, p, fs); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &NotificationSettingORM{}, &NotificationSetting{}, f, s, p, fs)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NotificationSettingORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db, f, s, p, fs); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []NotificationSettingORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NotificationSettingORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse, f, s, p, fs); err != nil {
			return nil, err
		}
	}
	pbResponse := []*NotificationSetting{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type NotificationSettingORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB, *query1.Filtering, *query1.Sorting, *query1.Pagination, *query1.FieldSelection) (*gorm1.DB, error)
}
type NotificationSettingORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB, *query1.Filtering, *query1.Sorting, *query1.Pagination, *query1.FieldSelection) (*gorm1.DB, error)
}
type NotificationSettingORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]NotificationSettingORM, *query1.Filtering, *query1.Sorting, *query1.Pagination, *query1.FieldSelection) error
}

// DefaultCreateNotificationDevice executes a basic gorm create call
func DefaultCreateNotificationDevice(ctx context.Context, in *NotificationDevice, db *gorm1.DB) (*NotificationDevice, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NotificationDeviceORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NotificationDeviceORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type NotificationDeviceORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationDeviceORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadNotificationDevice executes a basic gorm read call
func DefaultReadNotificationDevice(ctx context.Context, in *NotificationDevice, db *gorm1.DB) (*NotificationDevice, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(NotificationDeviceORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &NotificationDeviceORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NotificationDeviceORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := NotificationDeviceORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(NotificationDeviceORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type NotificationDeviceORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationDeviceORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationDeviceORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteNotificationDevice(ctx context.Context, in *NotificationDevice, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(NotificationDeviceORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&NotificationDeviceORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(NotificationDeviceORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type NotificationDeviceORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationDeviceORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteNotificationDeviceSet(ctx context.Context, in []*NotificationDevice, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors1.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&NotificationDeviceORM{})).(NotificationDeviceORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&NotificationDeviceORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&NotificationDeviceORM{})).(NotificationDeviceORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type NotificationDeviceORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*NotificationDevice, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationDeviceORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*NotificationDevice, *gorm1.DB) error
}

// DefaultStrictUpdateNotificationDevice clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateNotificationDevice(ctx context.Context, in *NotificationDevice, db *gorm1.DB) (*NotificationDevice, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateNotificationDevice")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &NotificationDeviceORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(NotificationDeviceORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(NotificationDeviceORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NotificationDeviceORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type NotificationDeviceORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationDeviceORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationDeviceORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchNotificationDevice executes a basic gorm update call with patch behavior
func DefaultPatchNotificationDevice(ctx context.Context, in *NotificationDevice, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*NotificationDevice, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	var pbObj NotificationDevice
	var err error
	if hook, ok := interface{}(&pbObj).(NotificationDeviceWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadNotificationDevice(ctx, &NotificationDevice{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(NotificationDeviceWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskNotificationDevice(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(NotificationDeviceWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateNotificationDevice(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(NotificationDeviceWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type NotificationDeviceWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *NotificationDevice, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationDeviceWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *NotificationDevice, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationDeviceWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *NotificationDevice, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationDeviceWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *NotificationDevice, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultPatchSetNotificationDevice executes a bulk gorm update call with patch behavior
func DefaultPatchSetNotificationDevice(ctx context.Context, objects []*NotificationDevice, updateMasks []*field_mask1.FieldMask, db *gorm1.DB) ([]*NotificationDevice, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors1.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*NotificationDevice, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchNotificationDevice(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskNotificationDevice patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskNotificationDevice(ctx context.Context, patchee *NotificationDevice, patcher *NotificationDevice, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*NotificationDevice, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"CreatedAt" {
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if f == prefix+"UpdatedAt" {
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"ProfileId" {
			patchee.ProfileId = patcher.ProfileId
			continue
		}
		if f == prefix+"DeviceToken" {
			patchee.DeviceToken = patcher.DeviceToken
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListNotificationDevice executes a gorm list call
func DefaultListNotificationDevice(ctx context.Context, db *gorm1.DB) ([]*NotificationDevice, error) {
	in := NotificationDevice{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NotificationDeviceORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &NotificationDeviceORM{}, &NotificationDevice{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NotificationDeviceORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []NotificationDeviceORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(NotificationDeviceORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*NotificationDevice{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type NotificationDeviceORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationDeviceORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type NotificationDeviceORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]NotificationDeviceORM) error
}
type NotificationsDefaultServer struct {
	DB *gorm1.DB
}

func (m *NotificationsDefaultServer) spanCreate(ctx context.Context, in interface{}, methodName string) (*trace1.Span, error) {
	_, span := trace1.StartSpan(ctx, fmt.Sprint("NotificationsDefaultServer.", methodName))
	raw, err := json1.Marshal(in)
	if err != nil {
		return nil, err
	}
	span.Annotate([]trace1.Attribute{trace1.StringAttribute("in", string(raw))}, "in parameter")
	return span, nil
}

// spanError ...
func (m *NotificationsDefaultServer) spanError(span *trace1.Span, err error) error {
	span.SetStatus(trace1.Status{
		Code:    trace1.StatusCodeUnknown,
		Message: err.Error(),
	})
	return err
}

// spanResult ...
func (m *NotificationsDefaultServer) spanResult(span *trace1.Span, out interface{}) error {
	raw, err := json1.Marshal(out)
	if err != nil {
		return err
	}
	span.Annotate([]trace1.Attribute{trace1.StringAttribute("out", string(raw))}, "out parameter")
	return nil
}

// CreateNotificationDevice ...
func (m *NotificationsDefaultServer) CreateNotificationDevice(ctx context.Context, in *CreateNotificationDeviceRequest) (*CreateNotificationDeviceResponse, error) {
	span, errSpanCreate := m.spanCreate(ctx, in, "CreateNotificationDevice")
	if errSpanCreate != nil {
		return nil, errSpanCreate
	}
	defer span.End()
	db := m.DB
	if custom, ok := interface{}(in).(NotificationsNotificationDeviceWithBeforeCreateNotificationDevice); ok {
		var err error
		if db, err = custom.BeforeCreateNotificationDevice(ctx, db); err != nil {
			return nil, m.spanError(span, err)
		}
	}
	res, err := DefaultCreateNotificationDevice(ctx, in.GetPayload(), db)
	if err != nil {
		return nil, m.spanError(span, err)
	}
	out := &CreateNotificationDeviceResponse{Result: res}
	if custom, ok := interface{}(in).(NotificationsNotificationDeviceWithAfterCreateNotificationDevice); ok {
		var err error
		if err = custom.AfterCreateNotificationDevice(ctx, out, db); err != nil {
			return nil, m.spanError(span, err)
		}
	}
	errSpanResult := m.spanResult(span, out)
	if errSpanResult != nil {
		return nil, m.spanError(span, errSpanResult)
	}
	return out, nil
}

// NotificationsNotificationDeviceWithBeforeCreateNotificationDevice called before DefaultCreateNotificationDeviceNotificationDevice in the default CreateNotificationDevice handler
type NotificationsNotificationDeviceWithBeforeCreateNotificationDevice interface {
	BeforeCreateNotificationDevice(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// NotificationsNotificationDeviceWithAfterCreateNotificationDevice called before DefaultCreateNotificationDeviceNotificationDevice in the default CreateNotificationDevice handler
type NotificationsNotificationDeviceWithAfterCreateNotificationDevice interface {
	AfterCreateNotificationDevice(context.Context, *CreateNotificationDeviceResponse, *gorm1.DB) error
}

// CreateNotificationSetting ...
func (m *NotificationsDefaultServer) CreateNotificationSetting(ctx context.Context, in *CreateNotificationSettingRequest) (*CreateNotificationSettingResponse, error) {
	span, errSpanCreate := m.spanCreate(ctx, in, "CreateNotificationSetting")
	if errSpanCreate != nil {
		return nil, errSpanCreate
	}
	defer span.End()
	db := m.DB
	if custom, ok := interface{}(in).(NotificationsNotificationSettingWithBeforeCreateNotificationSetting); ok {
		var err error
		if db, err = custom.BeforeCreateNotificationSetting(ctx, db); err != nil {
			return nil, m.spanError(span, err)
		}
	}
	res, err := DefaultCreateNotificationSetting(ctx, in.GetPayload(), db)
	if err != nil {
		return nil, m.spanError(span, err)
	}
	out := &CreateNotificationSettingResponse{Result: res}
	if custom, ok := interface{}(in).(NotificationsNotificationSettingWithAfterCreateNotificationSetting); ok {
		var err error
		if err = custom.AfterCreateNotificationSetting(ctx, out, db); err != nil {
			return nil, m.spanError(span, err)
		}
	}
	errSpanResult := m.spanResult(span, out)
	if errSpanResult != nil {
		return nil, m.spanError(span, errSpanResult)
	}
	return out, nil
}

// NotificationsNotificationSettingWithBeforeCreateNotificationSetting called before DefaultCreateNotificationSettingNotificationSetting in the default CreateNotificationSetting handler
type NotificationsNotificationSettingWithBeforeCreateNotificationSetting interface {
	BeforeCreateNotificationSetting(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// NotificationsNotificationSettingWithAfterCreateNotificationSetting called before DefaultCreateNotificationSettingNotificationSetting in the default CreateNotificationSetting handler
type NotificationsNotificationSettingWithAfterCreateNotificationSetting interface {
	AfterCreateNotificationSetting(context.Context, *CreateNotificationSettingResponse, *gorm1.DB) error
}

// ReadNotificationSetting ...
func (m *NotificationsDefaultServer) ReadNotificationSetting(ctx context.Context, in *ReadNotificationSettingRequest) (*ReadNotificationSettingResponse, error) {
	span, errSpanCreate := m.spanCreate(ctx, in, "ReadNotificationSetting")
	if errSpanCreate != nil {
		return nil, errSpanCreate
	}
	defer span.End()
	db := m.DB
	if custom, ok := interface{}(in).(NotificationsNotificationSettingWithBeforeReadNotificationSetting); ok {
		var err error
		if db, err = custom.BeforeReadNotificationSetting(ctx, db); err != nil {
			return nil, m.spanError(span, err)
		}
	}
	res, err := DefaultReadNotificationSetting(ctx, &NotificationSetting{Id: in.GetId()}, db)
	if err != nil {
		return nil, m.spanError(span, err)
	}
	out := &ReadNotificationSettingResponse{Result: res}
	if custom, ok := interface{}(in).(NotificationsNotificationSettingWithAfterReadNotificationSetting); ok {
		var err error
		if err = custom.AfterReadNotificationSetting(ctx, out, db); err != nil {
			return nil, m.spanError(span, err)
		}
	}
	errSpanResult := m.spanResult(span, out)
	if errSpanResult != nil {
		return nil, m.spanError(span, errSpanResult)
	}
	return out, nil
}

// NotificationsNotificationSettingWithBeforeReadNotificationSetting called before DefaultReadNotificationSettingNotificationSetting in the default ReadNotificationSetting handler
type NotificationsNotificationSettingWithBeforeReadNotificationSetting interface {
	BeforeReadNotificationSetting(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// NotificationsNotificationSettingWithAfterReadNotificationSetting called before DefaultReadNotificationSettingNotificationSetting in the default ReadNotificationSetting handler
type NotificationsNotificationSettingWithAfterReadNotificationSetting interface {
	AfterReadNotificationSetting(context.Context, *ReadNotificationSettingResponse, *gorm1.DB) error
}

// UpdateNotificationSetting ...
func (m *NotificationsDefaultServer) UpdateNotificationSetting(ctx context.Context, in *UpdateNotificationSettingRequest) (*UpdateNotificationSettingResponse, error) {
	span, errSpanCreate := m.spanCreate(ctx, in, "UpdateNotificationSetting")
	if errSpanCreate != nil {
		return nil, errSpanCreate
	}
	defer span.End()
	var err error
	var res *NotificationSetting
	db := m.DB
	if custom, ok := interface{}(in).(NotificationsNotificationSettingWithBeforeUpdateNotificationSetting); ok {
		var err error
		if db, err = custom.BeforeUpdateNotificationSetting(ctx, db); err != nil {
			return nil, m.spanError(span, err)
		}
	}
	res, err = DefaultStrictUpdateNotificationSetting(ctx, in.GetPayload(), db)
	if err != nil {
		return nil, m.spanError(span, err)
	}
	out := &UpdateNotificationSettingResponse{Result: res}
	if custom, ok := interface{}(in).(NotificationsNotificationSettingWithAfterUpdateNotificationSetting); ok {
		var err error
		if err = custom.AfterUpdateNotificationSetting(ctx, out, db); err != nil {
			return nil, m.spanError(span, err)
		}
	}
	errSpanResult := m.spanResult(span, out)
	if errSpanResult != nil {
		return nil, m.spanError(span, errSpanResult)
	}
	return out, nil
}

// NotificationsNotificationSettingWithBeforeUpdateNotificationSetting called before DefaultUpdateNotificationSettingNotificationSetting in the default UpdateNotificationSetting handler
type NotificationsNotificationSettingWithBeforeUpdateNotificationSetting interface {
	BeforeUpdateNotificationSetting(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// NotificationsNotificationSettingWithAfterUpdateNotificationSetting called before DefaultUpdateNotificationSettingNotificationSetting in the default UpdateNotificationSetting handler
type NotificationsNotificationSettingWithAfterUpdateNotificationSetting interface {
	AfterUpdateNotificationSetting(context.Context, *UpdateNotificationSettingResponse, *gorm1.DB) error
}

// DeleteNotificationSetting ...
func (m *NotificationsDefaultServer) DeleteNotificationSetting(ctx context.Context, in *DeleteNotificationSettingRequest) (*DeleteNotificationSettingResponse, error) {
	span, errSpanCreate := m.spanCreate(ctx, in, "DeleteNotificationSetting")
	if errSpanCreate != nil {
		return nil, errSpanCreate
	}
	defer span.End()
	db := m.DB
	if custom, ok := interface{}(in).(NotificationsNotificationSettingWithBeforeDeleteNotificationSetting); ok {
		var err error
		if db, err = custom.BeforeDeleteNotificationSetting(ctx, db); err != nil {
			return nil, m.spanError(span, err)
		}
	}
	err := DefaultDeleteNotificationSetting(ctx, &NotificationSetting{Id: in.GetId()}, db)
	if err != nil {
		return nil, m.spanError(span, err)
	}
	out := &DeleteNotificationSettingResponse{}
	if custom, ok := interface{}(in).(NotificationsNotificationSettingWithAfterDeleteNotificationSetting); ok {
		var err error
		if err = custom.AfterDeleteNotificationSetting(ctx, out, db); err != nil {
			return nil, m.spanError(span, err)
		}
	}
	errSpanResult := m.spanResult(span, out)
	if errSpanResult != nil {
		return nil, m.spanError(span, errSpanResult)
	}
	return out, nil
}

// NotificationsNotificationSettingWithBeforeDeleteNotificationSetting called before DefaultDeleteNotificationSettingNotificationSetting in the default DeleteNotificationSetting handler
type NotificationsNotificationSettingWithBeforeDeleteNotificationSetting interface {
	BeforeDeleteNotificationSetting(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// NotificationsNotificationSettingWithAfterDeleteNotificationSetting called before DefaultDeleteNotificationSettingNotificationSetting in the default DeleteNotificationSetting handler
type NotificationsNotificationSettingWithAfterDeleteNotificationSetting interface {
	AfterDeleteNotificationSetting(context.Context, *DeleteNotificationSettingResponse, *gorm1.DB) error
}

// ListNotificationSetting ...
func (m *NotificationsDefaultServer) ListNotificationSetting(ctx context.Context, in *ListNotificationSettingRequest) (*ListNotificationSettingResponse, error) {
	span, errSpanCreate := m.spanCreate(ctx, in, "ListNotificationSetting")
	if errSpanCreate != nil {
		return nil, errSpanCreate
	}
	defer span.End()
	db := m.DB
	if custom, ok := interface{}(in).(NotificationsNotificationSettingWithBeforeListNotificationSetting); ok {
		var err error
		if db, err = custom.BeforeListNotificationSetting(ctx, db); err != nil {
			return nil, m.spanError(span, err)
		}
	}
	res, err := DefaultListNotificationSetting(ctx, db, in.Filter, in.OrderBy, in.Paging, in.Fields)
	if err != nil {
		return nil, m.spanError(span, err)
	}
	out := &ListNotificationSettingResponse{Results: res}
	if custom, ok := interface{}(in).(NotificationsNotificationSettingWithAfterListNotificationSetting); ok {
		var err error
		if err = custom.AfterListNotificationSetting(ctx, out, db); err != nil {
			return nil, m.spanError(span, err)
		}
	}
	errSpanResult := m.spanResult(span, out)
	if errSpanResult != nil {
		return nil, m.spanError(span, errSpanResult)
	}
	return out, nil
}

// NotificationsNotificationSettingWithBeforeListNotificationSetting called before DefaultListNotificationSettingNotificationSetting in the default ListNotificationSetting handler
type NotificationsNotificationSettingWithBeforeListNotificationSetting interface {
	BeforeListNotificationSetting(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// NotificationsNotificationSettingWithAfterListNotificationSetting called before DefaultListNotificationSettingNotificationSetting in the default ListNotificationSetting handler
type NotificationsNotificationSettingWithAfterListNotificationSetting interface {
	AfterListNotificationSetting(context.Context, *ListNotificationSettingResponse, *gorm1.DB) error
}

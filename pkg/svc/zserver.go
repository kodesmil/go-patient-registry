package svc

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/golang/protobuf/ptypes/empty"
	pubsubgrpc "github.com/infobloxopen/atlas-pubsub/grpc"
	"github.com/jinzhu/gorm"
	"github.com/kodesmil/go-patient-registry/pkg/pb"
	"github.com/spf13/viper"
	"google.golang.org/grpc"
)

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~~~~~~~~~~~~~~~~~~~~~~~ A BRIEF DEVELOPMENT GUIDE ~~~~~~~~~~~~~~~~~~~~~~~~~
//
// TODO: Extend the GoPatientRegistry service by defining new RPCs and
// and message types in the pb/service.proto file. These RPCs and messages
// compose the API for your service. After modifying the proto schema in
// pb/service.proto, call "make protobuf" to regenerate the protobuf files.
//
// TODO: Create an implementation of the GoPatientRegistry server
// interface. This interface is generated by the protobuf compiler and exists
// inside the pb/service.pb.go file. The "server" struct already provides an
// implementation of GoPatientRegistry server interface service, but only
// for the GetVersion function. You will need to implement any new RPCs you
// add to your protobuf schema.
//
// TODO: Update the GetVersion function when newer versions of your service
// become available. Feel free to change GetVersion to better-suit how your
// versioning system, or get rid of it entirely. GetVersion helps make up a
// simple "starter" example that allows an end-to-end example. It is not
// required.
//
// TODO: Update the Publish function to better-suit your application, or get
// rid of it if your application is not using atlas pubsub.
//
// TODO: Oh yeah, delete this guide when you no longer need it.
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~ FAREWELL AND GOOD LUCK ~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

const (
	// version is the current version of the service
	version = "0.0.1"
)

// Default implementation of the GoPatientRegistry server interface
type server struct{ db *gorm.DB }

// GetVersion returns the current version of the service
func (server) GetVersion(context.Context, *empty.Empty) (*pb.VersionResponse, error) {
	return &pb.VersionResponse{Version: version}, nil
}

// Publish publishes a message to the pubsub server with the publish request message
// TODO update example publish with your own logic.
func (server) Publish(ctx context.Context, pr *pb.PublishRequest) (*pb.PublishResponse, error) {
	var url = fmt.Sprintf("%s:%s", viper.GetString("atlas.pubsub.address"), viper.GetString("atlas.pubsub.port"))
	var topic = viper.GetString("atlas.pubsub.publish")
	log.Printf("publishing hello world message to %s with topic %q", url, topic)
	conn, err := grpc.Dial(url, grpc.WithInsecure())
	if err != nil {
		log.Fatalf("pubsub publisher: Failed to dial to grpc server: %v", err)
	}
	p := pubsubgrpc.NewPublisher(topic, conn)
	msg := fmt.Sprintf("%s, %s %s", "Hello World", pr.GetMessage(), time.Now())
	if err := p.Publish(context.Background(), []byte(msg), nil); err != nil {
		return &pb.PublishResponse{Status: "Failed publishing message"}, nil
	}

	return &pb.PublishResponse{Status: "Message published"}, nil
}

// NewBasicServer returns an instance of the default server interface
func NewBasicServer(database *gorm.DB) (pb.GoPatientRegistryServer, error) {
	return &server{db: database}, nil
}

syntax = "proto3";

package service;

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "github.com/lyft/protoc-gen-validate/validate/validate.proto";
import "infobloxopen/protoc-gen-gorm/options/gorm.proto";
import "infobloxopen/protoc-gen-gorm/types/types.proto";
import "infobloxopen/atlas-app-toolkit/query/collection_operators.proto";
import "infobloxopen/atlas-app-toolkit/rpc/resource/resource.proto";

option go_package = "github.com/kodesmil/go-patient-registry/pkg/pb";

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Chat

message ChatMessage {
  option (gorm.opts) = {
    ormable: true,
    multi_account: true
  };
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "uuid" primary_key: true}];
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
  string text = 4;
  Profile author = 5;
}

message CreateChatMessageRequest {
  ChatMessage payload = 1;
}

message CreateChatMessageResponse {
  ChatMessage result = 1;
}

message ListChatMessageRequest {
  infoblox.api.Filtering filter = 1;
  infoblox.api.Sorting order_by = 2;
  infoblox.api.FieldSelection fields = 3;
  infoblox.api.Pagination paging = 4;
}

message ListChatMessageResponse {
  repeated ChatMessage results = 1;
}

message StreamConnectRequest {
  string account_id = 1;
}

message StreamChatEvent {
  oneof event {
    EventNone none = 1;
    EventJoin join = 2;
    EventLeave leave = 3;
    EventLog log = 4;
  }
}

message EventNone {}

message EventJoin {
  Profile user = 1;
}

message EventLeave {
  Profile user = 1;
}

message EventLog {
  ChatMessage payload = 1;
}

service ChatMessages {
  option (gorm.server).autogen = true;
  rpc Create (CreateChatMessageRequest) returns (CreateChatMessageResponse);
  rpc List (ListChatMessageRequest) returns (ListChatMessageResponse);
  rpc Stream (StreamConnectRequest) returns (stream StreamChatEvent);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Log

message LogActivity {
  option (gorm.opts) = {
    ormable: true,
    multi_account: true
  };
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "serial" primary_key: true}];
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
  string ip = 4;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Journal

message JournalSubject {
  option (gorm.opts) = {
    ormable: true,
  };
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "serial" primary_key: true}];
  string key = 2;
  string name = 3;
  enum Type {
    ACTIVITY = 0;
    SYMPTOM = 1;
  }
  Type type = 4;
}

message JournalEntry {
  option (gorm.opts) = {
    ormable: true,
    multi_account: true
  };
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "serial" primary_key: true}];
  enum Severity {
    NONE = 0;
    LOW = 1;
    MID = 2;
    HIGH = 3;
  }
  Severity severity = 2;
  string note = 3;
  google.protobuf.Timestamp created_at = 4;
  int64 journal_subject_id = 5;
}

message CreateJournalEntryRequest {
  JournalEntry payload = 1;
}

message CreateJournalEntryResponse {
  JournalEntry result = 1;
}

message ReadJournalEntryRequest {
  atlas.rpc.Identifier id = 1;
}

message ReadJournalEntryResponse {
  JournalEntry result = 1;
}

message UpdateJournalEntryRequest {
  JournalEntry payload = 1;
}

message UpdateJournalEntryResponse {
  JournalEntry result = 1;
}

message DeleteJournalEntryRequest {
  atlas.rpc.Identifier id = 1;
}

message DeleteJournalEntryResponse{}

message ListJournalEntryRequest {
  infoblox.api.Filtering filter = 1;
  infoblox.api.Sorting order_by = 2;
  infoblox.api.FieldSelection fields = 3;
  infoblox.api.Pagination paging = 4;
}

message ListJournalEntryResponse {
  repeated JournalEntry results = 1;
}

message ListJournalSubjectRequest {
  infoblox.api.Filtering filter = 1;
  infoblox.api.Sorting order_by = 2;
  infoblox.api.FieldSelection fields = 3;
  infoblox.api.Pagination paging = 4;
}

message ListJournalSubjectResponse {
  repeated JournalSubject results = 1;
}

service JournalEntries {
  option (gorm.server).autogen = true;
  rpc Create (CreateJournalEntryRequest) returns (CreateJournalEntryResponse);
  rpc Read (ReadJournalEntryRequest) returns (ReadJournalEntryResponse);
  rpc Update (UpdateJournalEntryRequest) returns (UpdateJournalEntryResponse);
  rpc Delete (DeleteJournalEntryRequest) returns (DeleteJournalEntryResponse) {
    option (gorm.method).object_type = "JournalEntry";
  }
  rpc List (ListJournalEntryRequest) returns (ListJournalEntryResponse);
}

service JournalSubjects {
  option (gorm.server).autogen = true;
  rpc List (ListJournalSubjectRequest) returns (ListJournalSubjectResponse);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Feed

message FeedTag {
  option (gorm.opts) = {
    ormable: true,
  };
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "serial" primary_key: true}];
  string key = 2 [(gorm.field).tag = {unique: true}];
  string name = 3;
  repeated FeedArticle feed_articles = 4 [(gorm.field).many_to_many = {jointable: "feed_articles_feed_tags"}];
}

message FeedAuthor {
  option (gorm.opts) = {
    ormable: true,
  };
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "serial" primary_key: true}];
  string name = 2;
  string profile_photo_url = 3;
  string bio = 4;
  repeated FeedArticle feed_articles = 5;
}

message FeedArticleDetail {
  option (gorm.opts) = {
    ormable: true,
  };
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "serial" primary_key: true}];
  string content = 2;
  FeedArticle feed_article = 3 [(gorm.field).has_one.preload = false];
}

message ReadFeedArticleDetailsRequest {
  atlas.rpc.Identifier id = 1;
}

message ReadFeedArticleDetailsResponse {
  FeedArticleDetail result = 1;
}

message FeedArticle {
  option (gorm.opts) = {
    ormable: true,
  };
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "serial" primary_key: true}];
  google.protobuf.Timestamp created_at = 2;
  string title = 3;
  string subtitle = 4;
  string cover_picture_url = 5;
  string content = 6;
  repeated FeedTag feed_tags = 7 [(gorm.field).many_to_many = {jointable: "feed_articles_feed_tags"}];
  FeedAuthor feed_author = 8 [(gorm.field).belongs_to = {}];
}

message ListFeedArticleRequest {
  infoblox.api.Filtering filter = 1;
  infoblox.api.Sorting order_by = 2;
  infoblox.api.FieldSelection fields = 3;
  infoblox.api.Pagination paging = 4;
}

message ListFeedArticleResponse {
  repeated FeedArticle results = 1;
}

service FeedArticles {
  option (gorm.server).autogen = true;
  rpc List (ListFeedArticleRequest) returns (ListFeedArticleResponse);
}

service FeedArticleDetails {
  option (gorm.server).autogen = true;
  rpc Read (ReadFeedArticleDetailsRequest) returns (ReadFeedArticleDetailsResponse);
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Notification Setting

message NotificationSetting {
  option (gorm.opts) = {
    ormable: true,
    multi_account: true
  };
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "serial" primary_key: true}];
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
  bool enable_notifications = 4;
  bool enable_journal_reminder = 5;
  string cron_journal_reminder = 6;
}

message CreateNotificationSettingRequest {
  NotificationSetting payload = 1;
}

message CreateNotificationSettingResponse {
  NotificationSetting result = 1;
}

message ReadNotificationSettingRequest {
  atlas.rpc.Identifier id = 1;
}

message ReadNotificationSettingResponse {
  NotificationSetting result = 1;
}

message UpdateNotificationSettingRequest {
  NotificationSetting payload = 1;
}

message UpdateNotificationSettingResponse {
  NotificationSetting result = 1;
}

message DeleteNotificationSettingRequest {
  atlas.rpc.Identifier id = 1;
}

message DeleteNotificationSettingResponse{}

message ListNotificationSettingRequest {
  infoblox.api.Filtering filter = 1;
  infoblox.api.Sorting order_by = 2;
  infoblox.api.FieldSelection fields = 3;
  infoblox.api.Pagination paging = 4;
}

message ListNotificationSettingResponse {
  repeated NotificationSetting results = 1;
}

service NotificationSettings {
  option (gorm.server).autogen = true;
  rpc Create (CreateNotificationSettingRequest) returns (CreateNotificationSettingResponse);
  rpc Read (ReadNotificationSettingRequest) returns (ReadNotificationSettingResponse);
  rpc Update (UpdateNotificationSettingRequest) returns (UpdateNotificationSettingResponse);
  rpc Delete (DeleteNotificationSettingRequest) returns (DeleteNotificationSettingResponse) {
    option (gorm.method).object_type = "NotificationSetting";
  }
  rpc List (ListNotificationSettingRequest) returns (ListNotificationSettingResponse);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Notification Device

message NotificationDevice {
  option (gorm.opts) = {
    ormable: true,
    multi_account: true
  };
  atlas.rpc.Identifier id = 1 [(gorm.field) = {
    tag: {type: "serial", primary_key: true, not_null: true}
  }];
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
  string device_token = 4 [(gorm.field).tag = {unique: true}];
}

message CreateNotificationDeviceRequest {
  NotificationDevice payload = 1;
}

message CreateNotificationDeviceResponse {
  NotificationDevice result = 1;
}

service NotificationDevices {
  option (gorm.server).autogen = true;
  rpc Create (CreateNotificationDeviceRequest) returns (CreateNotificationDeviceResponse);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Profile

message Profile {
  option (gorm.opts) = {
    ormable: true,
    multi_account: true
  };
  atlas.rpc.Identifier id = 1 [(gorm.field) = {
    tag: {type: "text", primary_key: true, not_null: true}
  }];
  string notes = 2;
  string first_name = 3;
  string last_name = 4;
  string primary_email = 5 [(gorm.field).tag = {unique: true}];
  repeated Group groups = 6;
}

message CreateProfileRequest {
  Profile payload = 1;
}

message CreateProfileResponse {
  Profile result = 1;
}

message ReadProfileRequest {
  atlas.rpc.Identifier id = 1;
}

message ReadProfileResponse {
  Profile result = 1;
}

message UpdateProfileRequest {
  Profile payload = 1;
}

message UpdateProfileResponse {
  Profile result = 1;
}

message DeleteProfileRequest {
  atlas.rpc.Identifier id = 1;
}

message DeleteProfileResponse{}

message ListProfileRequest {
  infoblox.api.Filtering filter = 1;
  infoblox.api.Sorting order_by = 2;
  infoblox.api.FieldSelection fields = 3;
  infoblox.api.Pagination paging = 4;
}

message ListProfileResponse {
  repeated Profile results = 1;
}

service Profiles {
  option (gorm.server).autogen = true;
  rpc Create (CreateProfileRequest) returns (CreateProfileResponse);
  rpc Read (ReadProfileRequest) returns (ReadProfileResponse);
  rpc Update (UpdateProfileRequest) returns (UpdateProfileResponse);
  rpc Delete (DeleteProfileRequest) returns (DeleteProfileResponse) {
    option (gorm.method).object_type = "Profile";
  }
  rpc List (ListProfileRequest) returns (ListProfileResponse);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Group

message Group {
  option (gorm.opts) = {
    ormable: true,
    multi_account: true
  };
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "serial" primary_key: true}];
  string name = 2;
  string notes = 3;
  atlas.rpc.Identifier profile_id = 4;
}

message CreateGroupRequest {
  Group payload = 1;
}

message CreateGroupResponse {
  Group result = 1;
}

message ReadGroupRequest {
  atlas.rpc.Identifier id = 1;
}

message ReadGroupResponse {
  Group result = 1;
}

message UpdateGroupRequest {
  Group payload = 1;
}

message UpdateGroupResponse {
  Group result = 1;
}

message DeleteGroupRequest {
  atlas.rpc.Identifier id = 1;
}

message DeleteGroupResponse {}

message ListGroupRequest {
  infoblox.api.Filtering filter = 1;
  infoblox.api.Sorting order_by = 2;
  infoblox.api.FieldSelection fields = 3;
  infoblox.api.Pagination paging = 4;
}

message ListGroupResponse {
  repeated Group results = 1;
}

service Groups {
  option (gorm.server).autogen = true;
  rpc Create (CreateGroupRequest) returns (CreateGroupResponse);
  rpc Read (ReadGroupRequest) returns (ReadGroupResponse);
  rpc Update (UpdateGroupRequest) returns (UpdateGroupResponse);
  rpc Delete (DeleteGroupRequest) returns (DeleteGroupResponse) {
    option (gorm.method).object_type = "Group";
  }
  rpc List (ListGroupRequest) returns (ListGroupResponse);
}
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/kodesmil/ks-model/chat.proto

// Generated with protoc-gen-gorm version: master
// Anticipating compatibility with atlas-app-toolkit version: master

package pb

import context "context"
import fmt "fmt"
import strings "strings"
import time "time"

import errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
import field_mask1 "google.golang.org/genproto/protobuf/field_mask"
import gorm1 "github.com/jinzhu/gorm"
import gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
import ptypes1 "github.com/golang/protobuf/ptypes"
import query1 "github.com/infobloxopen/atlas-app-toolkit/query"
import resource1 "github.com/infobloxopen/atlas-app-toolkit/gorm/resource"

import math "math"
import _ "google.golang.org/genproto/protobuf/field_mask"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/envoyproxy/protoc-gen-validate/validate"
import _ "github.com/infobloxopen/atlas-app-toolkit/query"
import _ "github.com/infobloxopen/atlas-app-toolkit/rpc/resource"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type ChatMessageORM struct {
	Author     *ProfileORM `gorm:"foreignkey:AuthorId;association_foreignkey:Id"`
	AuthorId   *string
	ChatRoom   *ChatRoomORM `gorm:"foreignkey:ChatRoomId;association_foreignkey:Id"`
	ChatRoomId *string      `gorm:"type:uuid"`
	CreatedAt  *time.Time
	Id         string `gorm:"type:uuid;primary_key"`
	Text       string
	UpdatedAt  *time.Time
}

// TableName overrides the default tablename generated by GORM
func (ChatMessageORM) TableName() string {
	return "chat_messages"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *ChatMessage) ToORM(ctx context.Context) (ChatMessageORM, error) {
	to := ChatMessageORM{}
	var err error
	if prehook, ok := interface{}(m).(ChatMessageWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if v, err := resource1.Decode(&ChatMessage{}, m.Id); err != nil {
		return to, err
	} else if v != nil {
		to.Id = v.(string)
	}
	if m.CreatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.CreatedAt); err != nil {
			return to, err
		}
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.UpdatedAt); err != nil {
			return to, err
		}
		to.UpdatedAt = &t
	}
	to.Text = m.Text
	if m.Author != nil {
		tempAuthor, err := m.Author.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Author = &tempAuthor
	}
	if m.AuthorId != nil {
		if v, err := resource1.Decode(&Profile{}, m.AuthorId); err != nil {
			return to, err
		} else if v != nil {
			vv := v.(string)
			to.AuthorId = &vv
		}
	}
	if m.ChatRoom != nil {
		tempChatRoom, err := m.ChatRoom.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.ChatRoom = &tempChatRoom
	}
	if m.ChatRoomId != nil {
		if v, err := resource1.Decode(&ChatRoom{}, m.ChatRoomId); err != nil {
			return to, err
		} else if v != nil {
			vv := v.(string)
			to.ChatRoomId = &vv
		}
	}
	if posthook, ok := interface{}(m).(ChatMessageWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ChatMessageORM) ToPB(ctx context.Context) (ChatMessage, error) {
	to := ChatMessage{}
	var err error
	if prehook, ok := interface{}(m).(ChatMessageWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	if v, err := resource1.Encode(&ChatMessage{}, m.Id); err != nil {
		return to, err
	} else {
		to.Id = v
	}
	if m.CreatedAt != nil {
		if to.CreatedAt, err = ptypes1.TimestampProto(*m.CreatedAt); err != nil {
			return to, err
		}
	}
	if m.UpdatedAt != nil {
		if to.UpdatedAt, err = ptypes1.TimestampProto(*m.UpdatedAt); err != nil {
			return to, err
		}
	}
	to.Text = m.Text
	if m.Author != nil {
		tempAuthor, err := m.Author.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Author = &tempAuthor
	}
	if m.AuthorId != nil {
		if v, err := resource1.Encode(&Profile{}, *m.AuthorId); err != nil {
			return to, err
		} else {
			to.AuthorId = v
		}
	}
	if m.ChatRoom != nil {
		tempChatRoom, err := m.ChatRoom.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.ChatRoom = &tempChatRoom
	}
	if m.ChatRoomId != nil {
		if v, err := resource1.Encode(&ChatRoom{}, *m.ChatRoomId); err != nil {
			return to, err
		} else {
			to.ChatRoomId = v
		}
	}
	if posthook, ok := interface{}(m).(ChatMessageWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type ChatMessage the arg will be the target, the caller the one being converted from

// ChatMessageBeforeToORM called before default ToORM code
type ChatMessageWithBeforeToORM interface {
	BeforeToORM(context.Context, *ChatMessageORM) error
}

// ChatMessageAfterToORM called after default ToORM code
type ChatMessageWithAfterToORM interface {
	AfterToORM(context.Context, *ChatMessageORM) error
}

// ChatMessageBeforeToPB called before default ToPB code
type ChatMessageWithBeforeToPB interface {
	BeforeToPB(context.Context, *ChatMessage) error
}

// ChatMessageAfterToPB called after default ToPB code
type ChatMessageWithAfterToPB interface {
	AfterToPB(context.Context, *ChatMessage) error
}

type ChatRoomORM struct {
	CreatedAt    *time.Time
	Id           string        `gorm:"type:uuid;primary_key"`
	Participants []*ProfileORM `gorm:"foreignkey:Id;association_foreignkey:Id;many2many:chat_room_profiles;jointable_foreignkey:chat_room_id;association_jointable_foreignkey:profile_id"`
	UpdatedAt    *time.Time
}

// TableName overrides the default tablename generated by GORM
func (ChatRoomORM) TableName() string {
	return "chat_rooms"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *ChatRoom) ToORM(ctx context.Context) (ChatRoomORM, error) {
	to := ChatRoomORM{}
	var err error
	if prehook, ok := interface{}(m).(ChatRoomWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if v, err := resource1.Decode(&ChatRoom{}, m.Id); err != nil {
		return to, err
	} else if v != nil {
		to.Id = v.(string)
	}
	if m.CreatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.CreatedAt); err != nil {
			return to, err
		}
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.UpdatedAt); err != nil {
			return to, err
		}
		to.UpdatedAt = &t
	}
	for _, v := range m.Participants {
		if v != nil {
			if tempParticipants, cErr := v.ToORM(ctx); cErr == nil {
				to.Participants = append(to.Participants, &tempParticipants)
			} else {
				return to, cErr
			}
		} else {
			to.Participants = append(to.Participants, nil)
		}
	}
	if posthook, ok := interface{}(m).(ChatRoomWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ChatRoomORM) ToPB(ctx context.Context) (ChatRoom, error) {
	to := ChatRoom{}
	var err error
	if prehook, ok := interface{}(m).(ChatRoomWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	if v, err := resource1.Encode(&ChatRoom{}, m.Id); err != nil {
		return to, err
	} else {
		to.Id = v
	}
	if m.CreatedAt != nil {
		if to.CreatedAt, err = ptypes1.TimestampProto(*m.CreatedAt); err != nil {
			return to, err
		}
	}
	if m.UpdatedAt != nil {
		if to.UpdatedAt, err = ptypes1.TimestampProto(*m.UpdatedAt); err != nil {
			return to, err
		}
	}
	for _, v := range m.Participants {
		if v != nil {
			if tempParticipants, cErr := v.ToPB(ctx); cErr == nil {
				to.Participants = append(to.Participants, &tempParticipants)
			} else {
				return to, cErr
			}
		} else {
			to.Participants = append(to.Participants, nil)
		}
	}
	if posthook, ok := interface{}(m).(ChatRoomWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type ChatRoom the arg will be the target, the caller the one being converted from

// ChatRoomBeforeToORM called before default ToORM code
type ChatRoomWithBeforeToORM interface {
	BeforeToORM(context.Context, *ChatRoomORM) error
}

// ChatRoomAfterToORM called after default ToORM code
type ChatRoomWithAfterToORM interface {
	AfterToORM(context.Context, *ChatRoomORM) error
}

// ChatRoomBeforeToPB called before default ToPB code
type ChatRoomWithBeforeToPB interface {
	BeforeToPB(context.Context, *ChatRoom) error
}

// ChatRoomAfterToPB called after default ToPB code
type ChatRoomWithAfterToPB interface {
	AfterToPB(context.Context, *ChatRoom) error
}

// DefaultCreateChatMessage executes a basic gorm create call
func DefaultCreateChatMessage(ctx context.Context, in *ChatMessage, db *gorm1.DB) (*ChatMessage, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ChatMessageORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ChatMessageORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ChatMessageORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ChatMessageORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadChatMessage executes a basic gorm read call
func DefaultReadChatMessage(ctx context.Context, in *ChatMessage, db *gorm1.DB) (*ChatMessage, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ChatMessageORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &ChatMessageORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ChatMessageORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ChatMessageORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ChatMessageORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ChatMessageORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ChatMessageORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ChatMessageORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteChatMessage(ctx context.Context, in *ChatMessage, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ChatMessageORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ChatMessageORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ChatMessageORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ChatMessageORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ChatMessageORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteChatMessageSet(ctx context.Context, in []*ChatMessage, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors1.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ChatMessageORM{})).(ChatMessageORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ChatMessageORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ChatMessageORM{})).(ChatMessageORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ChatMessageORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*ChatMessage, *gorm1.DB) (*gorm1.DB, error)
}
type ChatMessageORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*ChatMessage, *gorm1.DB) error
}

// DefaultStrictUpdateChatMessage clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateChatMessage(ctx context.Context, in *ChatMessage, db *gorm1.DB) (*ChatMessage, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateChatMessage")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ChatMessageORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ChatMessageORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ChatMessageORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ChatMessageORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ChatMessageORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ChatMessageORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ChatMessageORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchChatMessage executes a basic gorm update call with patch behavior
func DefaultPatchChatMessage(ctx context.Context, in *ChatMessage, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*ChatMessage, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	var pbObj ChatMessage
	var err error
	if hook, ok := interface{}(&pbObj).(ChatMessageWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadChatMessage(ctx, &ChatMessage{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ChatMessageWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskChatMessage(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ChatMessageWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateChatMessage(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ChatMessageWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ChatMessageWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *ChatMessage, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type ChatMessageWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *ChatMessage, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type ChatMessageWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *ChatMessage, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type ChatMessageWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *ChatMessage, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultPatchSetChatMessage executes a bulk gorm update call with patch behavior
func DefaultPatchSetChatMessage(ctx context.Context, objects []*ChatMessage, updateMasks []*field_mask1.FieldMask, db *gorm1.DB) ([]*ChatMessage, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors1.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*ChatMessage, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchChatMessage(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskChatMessage patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskChatMessage(ctx context.Context, patchee *ChatMessage, patcher *ChatMessage, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*ChatMessage, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	var updatedAuthor bool
	var updatedChatRoom bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"CreatedAt" {
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if f == prefix+"UpdatedAt" {
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"Text" {
			patchee.Text = patcher.Text
			continue
		}
		if !updatedAuthor && strings.HasPrefix(f, prefix+"Author.") {
			updatedAuthor = true
			if patcher.Author == nil {
				patchee.Author = nil
				continue
			}
			if patchee.Author == nil {
				patchee.Author = &Profile{}
			}
			if o, err := DefaultApplyFieldMaskProfile(ctx, patchee.Author, patcher.Author, &field_mask1.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Author.", db); err != nil {
				return nil, err
			} else {
				patchee.Author = o
			}
			continue
		}
		if f == prefix+"Author" {
			updatedAuthor = true
			patchee.Author = patcher.Author
			continue
		}
		if f == prefix+"AuthorId" {
			patchee.AuthorId = patcher.AuthorId
			continue
		}
		if !updatedChatRoom && strings.HasPrefix(f, prefix+"ChatRoom.") {
			updatedChatRoom = true
			if patcher.ChatRoom == nil {
				patchee.ChatRoom = nil
				continue
			}
			if patchee.ChatRoom == nil {
				patchee.ChatRoom = &ChatRoom{}
			}
			if o, err := DefaultApplyFieldMaskChatRoom(ctx, patchee.ChatRoom, patcher.ChatRoom, &field_mask1.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"ChatRoom.", db); err != nil {
				return nil, err
			} else {
				patchee.ChatRoom = o
			}
			continue
		}
		if f == prefix+"ChatRoom" {
			updatedChatRoom = true
			patchee.ChatRoom = patcher.ChatRoom
			continue
		}
		if f == prefix+"ChatRoomId" {
			patchee.ChatRoomId = patcher.ChatRoomId
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListChatMessage executes a gorm list call
func DefaultListChatMessage(ctx context.Context, db *gorm1.DB, f *query1.Filtering, s *query1.Sorting, p *query1.Pagination, fs *query1.FieldSelection) ([]*ChatMessage, error) {
	in := ChatMessage{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ChatMessageORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db, f, s, p, fs); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &ChatMessageORM{}, &ChatMessage{}, f, s, p, fs)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ChatMessageORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db, f, s, p, fs); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ChatMessageORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ChatMessageORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse, f, s, p, fs); err != nil {
			return nil, err
		}
	}
	pbResponse := []*ChatMessage{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ChatMessageORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB, *query1.Filtering, *query1.Sorting, *query1.Pagination, *query1.FieldSelection) (*gorm1.DB, error)
}
type ChatMessageORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB, *query1.Filtering, *query1.Sorting, *query1.Pagination, *query1.FieldSelection) (*gorm1.DB, error)
}
type ChatMessageORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]ChatMessageORM, *query1.Filtering, *query1.Sorting, *query1.Pagination, *query1.FieldSelection) error
}

// DefaultCreateChatRoom executes a basic gorm create call
func DefaultCreateChatRoom(ctx context.Context, in *ChatRoom, db *gorm1.DB) (*ChatRoom, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ChatRoomORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ChatRoomORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ChatRoomORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ChatRoomORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadChatRoom executes a basic gorm read call
func DefaultReadChatRoom(ctx context.Context, in *ChatRoom, db *gorm1.DB) (*ChatRoom, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ChatRoomORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &ChatRoomORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ChatRoomORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ChatRoomORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ChatRoomORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ChatRoomORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ChatRoomORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ChatRoomORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteChatRoom(ctx context.Context, in *ChatRoom, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ChatRoomORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ChatRoomORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ChatRoomORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ChatRoomORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ChatRoomORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteChatRoomSet(ctx context.Context, in []*ChatRoom, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors1.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ChatRoomORM{})).(ChatRoomORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ChatRoomORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ChatRoomORM{})).(ChatRoomORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ChatRoomORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*ChatRoom, *gorm1.DB) (*gorm1.DB, error)
}
type ChatRoomORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*ChatRoom, *gorm1.DB) error
}

// DefaultStrictUpdateChatRoom clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateChatRoom(ctx context.Context, in *ChatRoom, db *gorm1.DB) (*ChatRoom, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateChatRoom")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ChatRoomORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ChatRoomORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ChatRoomORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ChatRoomORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ChatRoomORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ChatRoomORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ChatRoomORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchChatRoom executes a basic gorm update call with patch behavior
func DefaultPatchChatRoom(ctx context.Context, in *ChatRoom, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*ChatRoom, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	var pbObj ChatRoom
	var err error
	if hook, ok := interface{}(&pbObj).(ChatRoomWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadChatRoom(ctx, &ChatRoom{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ChatRoomWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskChatRoom(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ChatRoomWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateChatRoom(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ChatRoomWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ChatRoomWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *ChatRoom, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type ChatRoomWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *ChatRoom, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type ChatRoomWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *ChatRoom, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type ChatRoomWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *ChatRoom, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultPatchSetChatRoom executes a bulk gorm update call with patch behavior
func DefaultPatchSetChatRoom(ctx context.Context, objects []*ChatRoom, updateMasks []*field_mask1.FieldMask, db *gorm1.DB) ([]*ChatRoom, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors1.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*ChatRoom, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchChatRoom(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskChatRoom patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskChatRoom(ctx context.Context, patchee *ChatRoom, patcher *ChatRoom, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*ChatRoom, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"CreatedAt" {
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if f == prefix+"UpdatedAt" {
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"Participants" {
			patchee.Participants = patcher.Participants
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListChatRoom executes a gorm list call
func DefaultListChatRoom(ctx context.Context, db *gorm1.DB, f *query1.Filtering, s *query1.Sorting, p *query1.Pagination, fs *query1.FieldSelection) ([]*ChatRoom, error) {
	in := ChatRoom{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ChatRoomORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db, f, s, p, fs); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &ChatRoomORM{}, &ChatRoom{}, f, s, p, fs)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ChatRoomORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db, f, s, p, fs); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ChatRoomORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ChatRoomORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse, f, s, p, fs); err != nil {
			return nil, err
		}
	}
	pbResponse := []*ChatRoom{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ChatRoomORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB, *query1.Filtering, *query1.Sorting, *query1.Pagination, *query1.FieldSelection) (*gorm1.DB, error)
}
type ChatRoomORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB, *query1.Filtering, *query1.Sorting, *query1.Pagination, *query1.FieldSelection) (*gorm1.DB, error)
}
type ChatRoomORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]ChatRoomORM, *query1.Filtering, *query1.Sorting, *query1.Pagination, *query1.FieldSelection) error
}
type ChatMessagesDefaultServer struct {
	DB *gorm1.DB
}

// List ...
func (m *ChatMessagesDefaultServer) List(ctx context.Context, in *ListChatMessageRequest) (*ListChatMessageResponse, error) {
	db := m.DB
	if custom, ok := interface{}(in).(ChatMessagesChatMessageWithBeforeList); ok {
		var err error
		if db, err = custom.BeforeList(ctx, db); err != nil {
			return nil, err
		}
	}
	res, err := DefaultListChatMessage(ctx, db, in.Filter, in.OrderBy, in.Paging, in.Fields)
	if err != nil {
		return nil, err
	}
	out := &ListChatMessageResponse{Results: res}
	if custom, ok := interface{}(in).(ChatMessagesChatMessageWithAfterList); ok {
		var err error
		if err = custom.AfterList(ctx, out, db); err != nil {
			return nil, err
		}
	}
	return out, nil
}

// ChatMessagesChatMessageWithBeforeList called before DefaultListChatMessage in the default List handler
type ChatMessagesChatMessageWithBeforeList interface {
	BeforeList(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// ChatMessagesChatMessageWithAfterList called before DefaultListChatMessage in the default List handler
type ChatMessagesChatMessageWithAfterList interface {
	AfterList(context.Context, *ListChatMessageResponse, *gorm1.DB) error
}
type ChatRoomsDefaultServer struct {
	DB *gorm1.DB
}

// List ...
func (m *ChatRoomsDefaultServer) List(ctx context.Context, in *ListChatRoomRequest) (*ListChatRoomResponse, error) {
	db := m.DB
	if custom, ok := interface{}(in).(ChatRoomsChatRoomWithBeforeList); ok {
		var err error
		if db, err = custom.BeforeList(ctx, db); err != nil {
			return nil, err
		}
	}
	res, err := DefaultListChatRoom(ctx, db, in.Filter, in.OrderBy, in.Paging, in.Fields)
	if err != nil {
		return nil, err
	}
	out := &ListChatRoomResponse{Results: res}
	if custom, ok := interface{}(in).(ChatRoomsChatRoomWithAfterList); ok {
		var err error
		if err = custom.AfterList(ctx, out, db); err != nil {
			return nil, err
		}
	}
	return out, nil
}

// ChatRoomsChatRoomWithBeforeList called before DefaultListChatRoom in the default List handler
type ChatRoomsChatRoomWithBeforeList interface {
	BeforeList(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// ChatRoomsChatRoomWithAfterList called before DefaultListChatRoom in the default List handler
type ChatRoomsChatRoomWithAfterList interface {
	AfterList(context.Context, *ListChatRoomResponse, *gorm1.DB) error
}

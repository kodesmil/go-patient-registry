// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/kodesmil/go-patient-registry/pkg/pb/service.proto

package pb

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	_ "github.com/lyft/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// TODO: Structure your own protobuf messages. Each protocol buffer message is a
// small logical record of information, containing a series of name-value pairs.
type VersionResponse struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionResponse) Reset()         { *m = VersionResponse{} }
func (m *VersionResponse) String() string { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()    {}
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4223590d2dd0caaa, []int{0}
}

func (m *VersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionResponse.Unmarshal(m, b)
}
func (m *VersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionResponse.Marshal(b, m, deterministic)
}
func (m *VersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionResponse.Merge(m, src)
}
func (m *VersionResponse) XXX_Size() int {
	return xxx_messageInfo_VersionResponse.Size(m)
}
func (m *VersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VersionResponse proto.InternalMessageInfo

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// Example Publish Response
type PublishResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4223590d2dd0caaa, []int{1}
}

func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishResponse.Unmarshal(m, b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
}
func (m *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(m, src)
}
func (m *PublishResponse) XXX_Size() int {
	return xxx_messageInfo_PublishResponse.Size(m)
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

func (m *PublishResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// Example Publish Request
type PublishRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4223590d2dd0caaa, []int{2}
}

func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishRequest.Unmarshal(m, b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
}
func (m *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(m, src)
}
func (m *PublishRequest) XXX_Size() int {
	return xxx_messageInfo_PublishRequest.Size(m)
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*VersionResponse)(nil), "service.VersionResponse")
	proto.RegisterType((*PublishResponse)(nil), "service.PublishResponse")
	proto.RegisterType((*PublishRequest)(nil), "service.PublishRequest")
}

func init() {
	proto.RegisterFile("github.com/kodesmil/go-patient-registry/pkg/pb/service.proto", fileDescriptor_4223590d2dd0caaa)
}

var fileDescriptor_4223590d2dd0caaa = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x55, 0xde, 0xd0, 0xf6, 0x59, 0x7a, 0xaf, 0x10, 0xa4, 0x52, 0x15, 0x06, 0x94, 0x09, 0x0a,
	0x89, 0x05, 0xdd, 0x5a, 0x26, 0x24, 0xd4, 0xb5, 0x74, 0x60, 0x60, 0x73, 0xda, 0x5b, 0xd7, 0x6a,
	0xe2, 0x6b, 0x62, 0xa7, 0xd0, 0x95, 0x5f, 0xe0, 0x67, 0xf8, 0x0f, 0x7e, 0x81, 0x0f, 0x41, 0x8d,
	0x9d, 0x28, 0x14, 0x16, 0xb6, 0x9c, 0x7b, 0xcf, 0x3d, 0xf7, 0xdc, 0x1c, 0x93, 0x6b, 0x2e, 0xcc,
	0x32, 0x8f, 0xa3, 0x19, 0xa6, 0x74, 0x85, 0x73, 0xd0, 0xa9, 0x48, 0x28, 0xc7, 0x50, 0x31, 0x23,
	0x40, 0x9a, 0x30, 0x03, 0x2e, 0xb4, 0xc9, 0x36, 0x54, 0xad, 0x38, 0x55, 0x31, 0xd5, 0x90, 0xad,
	0xc5, 0x0c, 0x22, 0x95, 0xa1, 0x41, 0xbf, 0xe9, 0x60, 0xef, 0x88, 0x23, 0xf2, 0x04, 0x68, 0x51,
	0x8e, 0xf3, 0x05, 0x85, 0x54, 0x99, 0x8d, 0x65, 0xf5, 0x8e, 0x5d, 0x93, 0x29, 0x41, 0x99, 0x94,
	0x68, 0x98, 0x11, 0x28, 0xb5, 0xeb, 0x8e, 0x6a, 0x0e, 0x92, 0xcd, 0xc2, 0x58, 0x8d, 0x59, 0xc8,
	0x41, 0x86, 0x6b, 0x96, 0x88, 0x39, 0x33, 0x40, 0xbf, 0x7d, 0xb8, 0xe1, 0x8b, 0x1a, 0x59, 0x3f,
	0x31, 0xce, 0x21, 0xa3, 0xa8, 0x0a, 0xf9, 0x1f, 0x56, 0x0d, 0x6b, 0xab, 0x84, 0x5c, 0x60, 0x9c,
	0xe0, 0x33, 0x2a, 0x90, 0xf5, 0x95, 0x1c, 0xb3, 0xb4, 0x92, 0xd8, 0x02, 0x3b, 0x1b, 0x9c, 0x93,
	0xf6, 0x3d, 0x64, 0x5a, 0xa0, 0x9c, 0x82, 0x56, 0x28, 0x35, 0xf8, 0x5d, 0xd2, 0x5c, 0xdb, 0x52,
	0xd7, 0x3b, 0xf1, 0x4e, 0xff, 0x4e, 0x4b, 0x18, 0x9c, 0x91, 0xf6, 0x24, 0x8f, 0x13, 0xa1, 0x97,
	0x15, 0xb9, 0x43, 0x1a, 0xda, 0x30, 0x93, 0x6b, 0xc7, 0x75, 0x28, 0xe8, 0x93, 0xff, 0x15, 0xf5,
	0x31, 0x07, 0x6d, 0xb6, 0xb2, 0x29, 0x68, 0xcd, 0x38, 0x94, 0xb2, 0x0e, 0x5e, 0xbd, 0x79, 0x64,
	0x7f, 0x8c, 0x13, 0x1b, 0xcd, 0xd4, 0x25, 0xe3, 0x4f, 0x08, 0x19, 0x83, 0x71, 0xe6, 0xfc, 0x4e,
	0x64, 0xff, 0x76, 0x54, 0x46, 0x11, 0xdd, 0x6e, 0xa3, 0xe8, 0x75, 0xa3, 0x32, 0xba, 0x9d, 0x33,
	0x82, 0xbd, 0x97, 0xf7, 0x8f, 0xd7, 0x3f, 0xc4, 0x6f, 0x51, 0x67, 0xdf, 0xbf, 0x23, 0x4d, 0xe7,
	0xc9, 0x3f, 0xac, 0xc6, 0xbe, 0xba, 0xac, 0xe9, 0xed, 0x5c, 0x1a, 0x1c, 0x14, 0x7a, 0xff, 0x82,
	0x16, 0x55, 0xb6, 0x33, 0xf4, 0xfa, 0x37, 0x83, 0x87, 0xcb, 0xdf, 0xbd, 0xb4, 0x91, 0x8a, 0xe3,
	0x46, 0x71, 0xc3, 0xe0, 0x33, 0x00, 0x00, 0xff, 0xff, 0xce, 0xa3, 0x48, 0x85, 0xa5, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GoPatientRegistryClient is the client API for GoPatientRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GoPatientRegistryClient interface {
	GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	// Example Publish call
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
}

type goPatientRegistryClient struct {
	cc *grpc.ClientConn
}

func NewGoPatientRegistryClient(cc *grpc.ClientConn) GoPatientRegistryClient {
	return &goPatientRegistryClient{cc}
}

func (c *goPatientRegistryClient) GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/service.GoPatientRegistry/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPatientRegistryClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/service.GoPatientRegistry/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoPatientRegistryServer is the server API for GoPatientRegistry service.
type GoPatientRegistryServer interface {
	GetVersion(context.Context, *empty.Empty) (*VersionResponse, error)
	// Example Publish call
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
}

func RegisterGoPatientRegistryServer(s *grpc.Server, srv GoPatientRegistryServer) {
	s.RegisterService(&_GoPatientRegistry_serviceDesc, srv)
}

func _GoPatientRegistry_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPatientRegistryServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.GoPatientRegistry/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPatientRegistryServer).GetVersion(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPatientRegistry_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPatientRegistryServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.GoPatientRegistry/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPatientRegistryServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoPatientRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.GoPatientRegistry",
	HandlerType: (*GoPatientRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _GoPatientRegistry_GetVersion_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _GoPatientRegistry_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/kodesmil/go-patient-registry/pkg/pb/service.proto",
}

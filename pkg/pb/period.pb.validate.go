// Code generated by protoc-gen-validate
// source: github.com/kodesmil/ks-model/period.proto
// DO NOT EDIT!!!

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on PeriodInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PeriodInfo) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PeriodInfoValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PeriodInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PeriodInfoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PeriodLengthInDays

	// no validation rules for CycleLengthInDays

	return nil
}

// PeriodInfoValidationError is the validation error returned by
// PeriodInfo.Validate if the designated constraints aren't met.
type PeriodInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PeriodInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PeriodInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PeriodInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PeriodInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PeriodInfoValidationError) ErrorName() string { return "PeriodInfoValidationError" }

// Error satisfies the builtin error interface
func (e PeriodInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPeriodInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PeriodInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PeriodInfoValidationError{}

// Validate checks the field values on PeriodDailyEntry with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PeriodDailyEntry) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PeriodDailyEntryValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PeriodDailyEntryValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PeriodDailyEntryValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PeriodDailyEntryValidationError{
				field:  "Day",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Severity

	return nil
}

// PeriodDailyEntryValidationError is the validation error returned by
// PeriodDailyEntry.Validate if the designated constraints aren't met.
type PeriodDailyEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PeriodDailyEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PeriodDailyEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PeriodDailyEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PeriodDailyEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PeriodDailyEntryValidationError) ErrorName() string { return "PeriodDailyEntryValidationError" }

// Error satisfies the builtin error interface
func (e PeriodDailyEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPeriodDailyEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PeriodDailyEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PeriodDailyEntryValidationError{}

// Validate checks the field values on CreatePeriodDailyEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePeriodDailyEntryRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePeriodDailyEntryRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreatePeriodDailyEntryRequestValidationError is the validation error
// returned by CreatePeriodDailyEntryRequest.Validate if the designated
// constraints aren't met.
type CreatePeriodDailyEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePeriodDailyEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePeriodDailyEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePeriodDailyEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePeriodDailyEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePeriodDailyEntryRequestValidationError) ErrorName() string {
	return "CreatePeriodDailyEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePeriodDailyEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePeriodDailyEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePeriodDailyEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePeriodDailyEntryRequestValidationError{}

// Validate checks the field values on CreatePeriodDailyEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePeriodDailyEntryResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePeriodDailyEntryResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreatePeriodDailyEntryResponseValidationError is the validation error
// returned by CreatePeriodDailyEntryResponse.Validate if the designated
// constraints aren't met.
type CreatePeriodDailyEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePeriodDailyEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePeriodDailyEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePeriodDailyEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePeriodDailyEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePeriodDailyEntryResponseValidationError) ErrorName() string {
	return "CreatePeriodDailyEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePeriodDailyEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePeriodDailyEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePeriodDailyEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePeriodDailyEntryResponseValidationError{}

// Validate checks the field values on ReadPeriodDailyEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadPeriodDailyEntryRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadPeriodDailyEntryRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadPeriodDailyEntryRequestValidationError is the validation error returned
// by ReadPeriodDailyEntryRequest.Validate if the designated constraints
// aren't met.
type ReadPeriodDailyEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadPeriodDailyEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadPeriodDailyEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadPeriodDailyEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadPeriodDailyEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadPeriodDailyEntryRequestValidationError) ErrorName() string {
	return "ReadPeriodDailyEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadPeriodDailyEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadPeriodDailyEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadPeriodDailyEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadPeriodDailyEntryRequestValidationError{}

// Validate checks the field values on ReadPeriodDailyEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadPeriodDailyEntryResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadPeriodDailyEntryResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadPeriodDailyEntryResponseValidationError is the validation error returned
// by ReadPeriodDailyEntryResponse.Validate if the designated constraints
// aren't met.
type ReadPeriodDailyEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadPeriodDailyEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadPeriodDailyEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadPeriodDailyEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadPeriodDailyEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadPeriodDailyEntryResponseValidationError) ErrorName() string {
	return "ReadPeriodDailyEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadPeriodDailyEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadPeriodDailyEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadPeriodDailyEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadPeriodDailyEntryResponseValidationError{}

// Validate checks the field values on UpdatePeriodDailyEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePeriodDailyEntryRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePeriodDailyEntryRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdatePeriodDailyEntryRequestValidationError is the validation error
// returned by UpdatePeriodDailyEntryRequest.Validate if the designated
// constraints aren't met.
type UpdatePeriodDailyEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePeriodDailyEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePeriodDailyEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePeriodDailyEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePeriodDailyEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePeriodDailyEntryRequestValidationError) ErrorName() string {
	return "UpdatePeriodDailyEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePeriodDailyEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePeriodDailyEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePeriodDailyEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePeriodDailyEntryRequestValidationError{}

// Validate checks the field values on UpdatePeriodDailyEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePeriodDailyEntryResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePeriodDailyEntryResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdatePeriodDailyEntryResponseValidationError is the validation error
// returned by UpdatePeriodDailyEntryResponse.Validate if the designated
// constraints aren't met.
type UpdatePeriodDailyEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePeriodDailyEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePeriodDailyEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePeriodDailyEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePeriodDailyEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePeriodDailyEntryResponseValidationError) ErrorName() string {
	return "UpdatePeriodDailyEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePeriodDailyEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePeriodDailyEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePeriodDailyEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePeriodDailyEntryResponseValidationError{}

// Validate checks the field values on DeletePeriodDailyEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeletePeriodDailyEntryRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeletePeriodDailyEntryRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeletePeriodDailyEntryRequestValidationError is the validation error
// returned by DeletePeriodDailyEntryRequest.Validate if the designated
// constraints aren't met.
type DeletePeriodDailyEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePeriodDailyEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePeriodDailyEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePeriodDailyEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePeriodDailyEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePeriodDailyEntryRequestValidationError) ErrorName() string {
	return "DeletePeriodDailyEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePeriodDailyEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePeriodDailyEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePeriodDailyEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePeriodDailyEntryRequestValidationError{}

// Validate checks the field values on DeletePeriodDailyEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeletePeriodDailyEntryResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeletePeriodDailyEntryResponseValidationError is the validation error
// returned by DeletePeriodDailyEntryResponse.Validate if the designated
// constraints aren't met.
type DeletePeriodDailyEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePeriodDailyEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePeriodDailyEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePeriodDailyEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePeriodDailyEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePeriodDailyEntryResponseValidationError) ErrorName() string {
	return "DeletePeriodDailyEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePeriodDailyEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePeriodDailyEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePeriodDailyEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePeriodDailyEntryResponseValidationError{}

// Validate checks the field values on ListPeriodDailyEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPeriodDailyEntryRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPeriodDailyEntryRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPeriodDailyEntryRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPeriodDailyEntryRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPeriodDailyEntryRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListPeriodDailyEntryRequestValidationError is the validation error returned
// by ListPeriodDailyEntryRequest.Validate if the designated constraints
// aren't met.
type ListPeriodDailyEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPeriodDailyEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPeriodDailyEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPeriodDailyEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPeriodDailyEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPeriodDailyEntryRequestValidationError) ErrorName() string {
	return "ListPeriodDailyEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPeriodDailyEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPeriodDailyEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPeriodDailyEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPeriodDailyEntryRequestValidationError{}

// Validate checks the field values on ListPeriodDailyEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPeriodDailyEntryResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPeriodDailyEntryResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListPeriodDailyEntryResponseValidationError is the validation error returned
// by ListPeriodDailyEntryResponse.Validate if the designated constraints
// aren't met.
type ListPeriodDailyEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPeriodDailyEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPeriodDailyEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPeriodDailyEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPeriodDailyEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPeriodDailyEntryResponseValidationError) ErrorName() string {
	return "ListPeriodDailyEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPeriodDailyEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPeriodDailyEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPeriodDailyEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPeriodDailyEntryResponseValidationError{}

// Validate checks the field values on CreatePeriodInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePeriodInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePeriodInfoRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreatePeriodInfoRequestValidationError is the validation error returned by
// CreatePeriodInfoRequest.Validate if the designated constraints aren't met.
type CreatePeriodInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePeriodInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePeriodInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePeriodInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePeriodInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePeriodInfoRequestValidationError) ErrorName() string {
	return "CreatePeriodInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePeriodInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePeriodInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePeriodInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePeriodInfoRequestValidationError{}

// Validate checks the field values on CreatePeriodInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePeriodInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePeriodInfoResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreatePeriodInfoResponseValidationError is the validation error returned by
// CreatePeriodInfoResponse.Validate if the designated constraints aren't met.
type CreatePeriodInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePeriodInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePeriodInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePeriodInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePeriodInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePeriodInfoResponseValidationError) ErrorName() string {
	return "CreatePeriodInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePeriodInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePeriodInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePeriodInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePeriodInfoResponseValidationError{}

// Validate checks the field values on ReadPeriodInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadPeriodInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadPeriodInfoRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadPeriodInfoRequestValidationError is the validation error returned by
// ReadPeriodInfoRequest.Validate if the designated constraints aren't met.
type ReadPeriodInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadPeriodInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadPeriodInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadPeriodInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadPeriodInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadPeriodInfoRequestValidationError) ErrorName() string {
	return "ReadPeriodInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadPeriodInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadPeriodInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadPeriodInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadPeriodInfoRequestValidationError{}

// Validate checks the field values on ReadPeriodInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadPeriodInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadPeriodInfoResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadPeriodInfoResponseValidationError is the validation error returned by
// ReadPeriodInfoResponse.Validate if the designated constraints aren't met.
type ReadPeriodInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadPeriodInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadPeriodInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadPeriodInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadPeriodInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadPeriodInfoResponseValidationError) ErrorName() string {
	return "ReadPeriodInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadPeriodInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadPeriodInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadPeriodInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadPeriodInfoResponseValidationError{}

// Validate checks the field values on UpdatePeriodInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePeriodInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePeriodInfoRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdatePeriodInfoRequestValidationError is the validation error returned by
// UpdatePeriodInfoRequest.Validate if the designated constraints aren't met.
type UpdatePeriodInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePeriodInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePeriodInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePeriodInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePeriodInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePeriodInfoRequestValidationError) ErrorName() string {
	return "UpdatePeriodInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePeriodInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePeriodInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePeriodInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePeriodInfoRequestValidationError{}

// Validate checks the field values on UpdatePeriodInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePeriodInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePeriodInfoResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdatePeriodInfoResponseValidationError is the validation error returned by
// UpdatePeriodInfoResponse.Validate if the designated constraints aren't met.
type UpdatePeriodInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePeriodInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePeriodInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePeriodInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePeriodInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePeriodInfoResponseValidationError) ErrorName() string {
	return "UpdatePeriodInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePeriodInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePeriodInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePeriodInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePeriodInfoResponseValidationError{}

// Validate checks the field values on DeletePeriodInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeletePeriodInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeletePeriodInfoRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeletePeriodInfoRequestValidationError is the validation error returned by
// DeletePeriodInfoRequest.Validate if the designated constraints aren't met.
type DeletePeriodInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePeriodInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePeriodInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePeriodInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePeriodInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePeriodInfoRequestValidationError) ErrorName() string {
	return "DeletePeriodInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePeriodInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePeriodInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePeriodInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePeriodInfoRequestValidationError{}

// Validate checks the field values on DeletePeriodInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeletePeriodInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeletePeriodInfoResponseValidationError is the validation error returned by
// DeletePeriodInfoResponse.Validate if the designated constraints aren't met.
type DeletePeriodInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePeriodInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePeriodInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePeriodInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePeriodInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePeriodInfoResponseValidationError) ErrorName() string {
	return "DeletePeriodInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePeriodInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePeriodInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePeriodInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePeriodInfoResponseValidationError{}

// Validate checks the field values on ListPeriodInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPeriodInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPeriodInfoRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPeriodInfoRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPeriodInfoRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPeriodInfoRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListPeriodInfoRequestValidationError is the validation error returned by
// ListPeriodInfoRequest.Validate if the designated constraints aren't met.
type ListPeriodInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPeriodInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPeriodInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPeriodInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPeriodInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPeriodInfoRequestValidationError) ErrorName() string {
	return "ListPeriodInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPeriodInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPeriodInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPeriodInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPeriodInfoRequestValidationError{}

// Validate checks the field values on ListPeriodInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPeriodInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPeriodInfoResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListPeriodInfoResponseValidationError is the validation error returned by
// ListPeriodInfoResponse.Validate if the designated constraints aren't met.
type ListPeriodInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPeriodInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPeriodInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPeriodInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPeriodInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPeriodInfoResponseValidationError) ErrorName() string {
	return "ListPeriodInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPeriodInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPeriodInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPeriodInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPeriodInfoResponseValidationError{}

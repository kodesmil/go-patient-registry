// Code generated by protoc-gen-validate
// source: github.com/kodesmil/ks-model/journal.proto
// DO NOT EDIT!!!

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on JournalSubject with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *JournalSubject) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JournalSubjectValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Key

	// no validation rules for Name

	// no validation rules for Type

	return nil
}

// JournalSubjectValidationError is the validation error returned by
// JournalSubject.Validate if the designated constraints aren't met.
type JournalSubjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JournalSubjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JournalSubjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JournalSubjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JournalSubjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JournalSubjectValidationError) ErrorName() string { return "JournalSubjectValidationError" }

// Error satisfies the builtin error interface
func (e JournalSubjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJournalSubject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JournalSubjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JournalSubjectValidationError{}

// Validate checks the field values on JournalEntry with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *JournalEntry) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JournalEntryValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Severity

	// no validation rules for Note

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JournalEntryValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for JournalSubjectId

	return nil
}

// JournalEntryValidationError is the validation error returned by
// JournalEntry.Validate if the designated constraints aren't met.
type JournalEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JournalEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JournalEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JournalEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JournalEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JournalEntryValidationError) ErrorName() string { return "JournalEntryValidationError" }

// Error satisfies the builtin error interface
func (e JournalEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJournalEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JournalEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JournalEntryValidationError{}

// Validate checks the field values on CreateJournalEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateJournalEntryRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateJournalEntryRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateJournalEntryRequestValidationError is the validation error returned by
// CreateJournalEntryRequest.Validate if the designated constraints aren't met.
type CreateJournalEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateJournalEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateJournalEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateJournalEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateJournalEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateJournalEntryRequestValidationError) ErrorName() string {
	return "CreateJournalEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateJournalEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateJournalEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateJournalEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateJournalEntryRequestValidationError{}

// Validate checks the field values on CreateJournalEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateJournalEntryResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateJournalEntryResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateJournalEntryResponseValidationError is the validation error returned
// by CreateJournalEntryResponse.Validate if the designated constraints aren't met.
type CreateJournalEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateJournalEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateJournalEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateJournalEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateJournalEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateJournalEntryResponseValidationError) ErrorName() string {
	return "CreateJournalEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateJournalEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateJournalEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateJournalEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateJournalEntryResponseValidationError{}

// Validate checks the field values on ReadJournalEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadJournalEntryRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadJournalEntryRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadJournalEntryRequestValidationError is the validation error returned by
// ReadJournalEntryRequest.Validate if the designated constraints aren't met.
type ReadJournalEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadJournalEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadJournalEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadJournalEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadJournalEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadJournalEntryRequestValidationError) ErrorName() string {
	return "ReadJournalEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadJournalEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadJournalEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadJournalEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadJournalEntryRequestValidationError{}

// Validate checks the field values on ReadJournalEntryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadJournalEntryResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadJournalEntryResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadJournalEntryResponseValidationError is the validation error returned by
// ReadJournalEntryResponse.Validate if the designated constraints aren't met.
type ReadJournalEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadJournalEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadJournalEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadJournalEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadJournalEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadJournalEntryResponseValidationError) ErrorName() string {
	return "ReadJournalEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadJournalEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadJournalEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadJournalEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadJournalEntryResponseValidationError{}

// Validate checks the field values on UpdateJournalEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateJournalEntryRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateJournalEntryRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateJournalEntryRequestValidationError is the validation error returned by
// UpdateJournalEntryRequest.Validate if the designated constraints aren't met.
type UpdateJournalEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJournalEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJournalEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJournalEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJournalEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJournalEntryRequestValidationError) ErrorName() string {
	return "UpdateJournalEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJournalEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJournalEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJournalEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJournalEntryRequestValidationError{}

// Validate checks the field values on UpdateJournalEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateJournalEntryResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateJournalEntryResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateJournalEntryResponseValidationError is the validation error returned
// by UpdateJournalEntryResponse.Validate if the designated constraints aren't met.
type UpdateJournalEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJournalEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJournalEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJournalEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJournalEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJournalEntryResponseValidationError) ErrorName() string {
	return "UpdateJournalEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJournalEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJournalEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJournalEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJournalEntryResponseValidationError{}

// Validate checks the field values on DeleteJournalEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteJournalEntryRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteJournalEntryRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteJournalEntryRequestValidationError is the validation error returned by
// DeleteJournalEntryRequest.Validate if the designated constraints aren't met.
type DeleteJournalEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteJournalEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteJournalEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteJournalEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteJournalEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteJournalEntryRequestValidationError) ErrorName() string {
	return "DeleteJournalEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteJournalEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteJournalEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteJournalEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteJournalEntryRequestValidationError{}

// Validate checks the field values on DeleteJournalEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteJournalEntryResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteJournalEntryResponseValidationError is the validation error returned
// by DeleteJournalEntryResponse.Validate if the designated constraints aren't met.
type DeleteJournalEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteJournalEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteJournalEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteJournalEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteJournalEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteJournalEntryResponseValidationError) ErrorName() string {
	return "DeleteJournalEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteJournalEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteJournalEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteJournalEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteJournalEntryResponseValidationError{}

// Validate checks the field values on ListJournalEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListJournalEntryRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListJournalEntryRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListJournalEntryRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListJournalEntryRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListJournalEntryRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListJournalEntryRequestValidationError is the validation error returned by
// ListJournalEntryRequest.Validate if the designated constraints aren't met.
type ListJournalEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListJournalEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListJournalEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListJournalEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListJournalEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListJournalEntryRequestValidationError) ErrorName() string {
	return "ListJournalEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListJournalEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListJournalEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListJournalEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListJournalEntryRequestValidationError{}

// Validate checks the field values on ListJournalEntryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListJournalEntryResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListJournalEntryResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListJournalEntryResponseValidationError is the validation error returned by
// ListJournalEntryResponse.Validate if the designated constraints aren't met.
type ListJournalEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListJournalEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListJournalEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListJournalEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListJournalEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListJournalEntryResponseValidationError) ErrorName() string {
	return "ListJournalEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListJournalEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListJournalEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListJournalEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListJournalEntryResponseValidationError{}

// Validate checks the field values on ListJournalSubjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListJournalSubjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListJournalSubjectRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListJournalSubjectRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListJournalSubjectRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListJournalSubjectRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListJournalSubjectRequestValidationError is the validation error returned by
// ListJournalSubjectRequest.Validate if the designated constraints aren't met.
type ListJournalSubjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListJournalSubjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListJournalSubjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListJournalSubjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListJournalSubjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListJournalSubjectRequestValidationError) ErrorName() string {
	return "ListJournalSubjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListJournalSubjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListJournalSubjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListJournalSubjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListJournalSubjectRequestValidationError{}

// Validate checks the field values on ListJournalSubjectResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListJournalSubjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListJournalSubjectResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListJournalSubjectResponseValidationError is the validation error returned
// by ListJournalSubjectResponse.Validate if the designated constraints aren't met.
type ListJournalSubjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListJournalSubjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListJournalSubjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListJournalSubjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListJournalSubjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListJournalSubjectResponseValidationError) ErrorName() string {
	return "ListJournalSubjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListJournalSubjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListJournalSubjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListJournalSubjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListJournalSubjectResponseValidationError{}

// Code generated by protoc-gen-validate
// source: github.com/kodesmil/ks-model/notification.proto
// DO NOT EDIT!!!

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on NotificationSetting with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NotificationSetting) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationSettingValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationSettingValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationSettingValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnableNotifications

	// no validation rules for EnableJournalReminder

	// no validation rules for CronJournalReminder

	return nil
}

// NotificationSettingValidationError is the validation error returned by
// NotificationSetting.Validate if the designated constraints aren't met.
type NotificationSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationSettingValidationError) ErrorName() string {
	return "NotificationSettingValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationSettingValidationError{}

// Validate checks the field values on CreateNotificationSettingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *CreateNotificationSettingRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNotificationSettingRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateNotificationSettingRequestValidationError is the validation error
// returned by CreateNotificationSettingRequest.Validate if the designated
// constraints aren't met.
type CreateNotificationSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotificationSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotificationSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotificationSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotificationSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotificationSettingRequestValidationError) ErrorName() string {
	return "CreateNotificationSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotificationSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotificationSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotificationSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotificationSettingRequestValidationError{}

// Validate checks the field values on CreateNotificationSettingResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *CreateNotificationSettingResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNotificationSettingResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateNotificationSettingResponseValidationError is the validation error
// returned by CreateNotificationSettingResponse.Validate if the designated
// constraints aren't met.
type CreateNotificationSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotificationSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotificationSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotificationSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotificationSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotificationSettingResponseValidationError) ErrorName() string {
	return "CreateNotificationSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotificationSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotificationSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotificationSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotificationSettingResponseValidationError{}

// Validate checks the field values on ReadNotificationSettingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadNotificationSettingRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadNotificationSettingRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadNotificationSettingRequestValidationError is the validation error
// returned by ReadNotificationSettingRequest.Validate if the designated
// constraints aren't met.
type ReadNotificationSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadNotificationSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadNotificationSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadNotificationSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadNotificationSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadNotificationSettingRequestValidationError) ErrorName() string {
	return "ReadNotificationSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadNotificationSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadNotificationSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadNotificationSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadNotificationSettingRequestValidationError{}

// Validate checks the field values on ReadNotificationSettingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadNotificationSettingResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadNotificationSettingResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadNotificationSettingResponseValidationError is the validation error
// returned by ReadNotificationSettingResponse.Validate if the designated
// constraints aren't met.
type ReadNotificationSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadNotificationSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadNotificationSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadNotificationSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadNotificationSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadNotificationSettingResponseValidationError) ErrorName() string {
	return "ReadNotificationSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadNotificationSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadNotificationSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadNotificationSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadNotificationSettingResponseValidationError{}

// Validate checks the field values on UpdateNotificationSettingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateNotificationSettingRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNotificationSettingRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateNotificationSettingRequestValidationError is the validation error
// returned by UpdateNotificationSettingRequest.Validate if the designated
// constraints aren't met.
type UpdateNotificationSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotificationSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotificationSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotificationSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotificationSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotificationSettingRequestValidationError) ErrorName() string {
	return "UpdateNotificationSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotificationSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotificationSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotificationSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotificationSettingRequestValidationError{}

// Validate checks the field values on UpdateNotificationSettingResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateNotificationSettingResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNotificationSettingResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateNotificationSettingResponseValidationError is the validation error
// returned by UpdateNotificationSettingResponse.Validate if the designated
// constraints aren't met.
type UpdateNotificationSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotificationSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotificationSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotificationSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotificationSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotificationSettingResponseValidationError) ErrorName() string {
	return "UpdateNotificationSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotificationSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotificationSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotificationSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotificationSettingResponseValidationError{}

// Validate checks the field values on DeleteNotificationSettingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *DeleteNotificationSettingRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteNotificationSettingRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteNotificationSettingRequestValidationError is the validation error
// returned by DeleteNotificationSettingRequest.Validate if the designated
// constraints aren't met.
type DeleteNotificationSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotificationSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotificationSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotificationSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotificationSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotificationSettingRequestValidationError) ErrorName() string {
	return "DeleteNotificationSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotificationSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotificationSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotificationSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotificationSettingRequestValidationError{}

// Validate checks the field values on DeleteNotificationSettingResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *DeleteNotificationSettingResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteNotificationSettingResponseValidationError is the validation error
// returned by DeleteNotificationSettingResponse.Validate if the designated
// constraints aren't met.
type DeleteNotificationSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotificationSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotificationSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotificationSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotificationSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotificationSettingResponseValidationError) ErrorName() string {
	return "DeleteNotificationSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotificationSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotificationSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotificationSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotificationSettingResponseValidationError{}

// Validate checks the field values on ListNotificationSettingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNotificationSettingRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNotificationSettingRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNotificationSettingRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNotificationSettingRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNotificationSettingRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListNotificationSettingRequestValidationError is the validation error
// returned by ListNotificationSettingRequest.Validate if the designated
// constraints aren't met.
type ListNotificationSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNotificationSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNotificationSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNotificationSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNotificationSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNotificationSettingRequestValidationError) ErrorName() string {
	return "ListNotificationSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNotificationSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNotificationSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNotificationSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNotificationSettingRequestValidationError{}

// Validate checks the field values on ListNotificationSettingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNotificationSettingResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNotificationSettingResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListNotificationSettingResponseValidationError is the validation error
// returned by ListNotificationSettingResponse.Validate if the designated
// constraints aren't met.
type ListNotificationSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNotificationSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNotificationSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNotificationSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNotificationSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNotificationSettingResponseValidationError) ErrorName() string {
	return "ListNotificationSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNotificationSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNotificationSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNotificationSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNotificationSettingResponseValidationError{}

// Validate checks the field values on NotificationDevice with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NotificationDevice) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationDeviceValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationDeviceValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationDeviceValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeviceToken

	return nil
}

// NotificationDeviceValidationError is the validation error returned by
// NotificationDevice.Validate if the designated constraints aren't met.
type NotificationDeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationDeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationDeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationDeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationDeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationDeviceValidationError) ErrorName() string {
	return "NotificationDeviceValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationDeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationDevice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationDeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationDeviceValidationError{}

// Validate checks the field values on CreateNotificationDeviceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNotificationDeviceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNotificationDeviceRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateNotificationDeviceRequestValidationError is the validation error
// returned by CreateNotificationDeviceRequest.Validate if the designated
// constraints aren't met.
type CreateNotificationDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotificationDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotificationDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotificationDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotificationDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotificationDeviceRequestValidationError) ErrorName() string {
	return "CreateNotificationDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotificationDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotificationDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotificationDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotificationDeviceRequestValidationError{}

// Validate checks the field values on CreateNotificationDeviceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *CreateNotificationDeviceResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNotificationDeviceResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateNotificationDeviceResponseValidationError is the validation error
// returned by CreateNotificationDeviceResponse.Validate if the designated
// constraints aren't met.
type CreateNotificationDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotificationDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotificationDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotificationDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotificationDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotificationDeviceResponseValidationError) ErrorName() string {
	return "CreateNotificationDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotificationDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotificationDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotificationDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotificationDeviceResponseValidationError{}

// Code generated by protoc-gen-validate
// source: github.com/kodesmil/ks-model/chat.proto
// DO NOT EDIT!!!

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on ChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ChatMessage) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatMessageValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatMessageValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatMessageValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Text

	if v, ok := interface{}(m.GetAuthor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatMessageValidationError{
				field:  "Author",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAuthorId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatMessageValidationError{
				field:  "AuthorId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetChatRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatMessageValidationError{
				field:  "ChatRoom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetChatRoomId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatMessageValidationError{
				field:  "ChatRoomId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ChatMessageValidationError is the validation error returned by
// ChatMessage.Validate if the designated constraints aren't met.
type ChatMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatMessageValidationError) ErrorName() string { return "ChatMessageValidationError" }

// Error satisfies the builtin error interface
func (e ChatMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatMessageValidationError{}

// Validate checks the field values on ChatRoom with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ChatRoom) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatRoomValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatRoomValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatRoomValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetParticipants() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatRoomValidationError{
					field:  fmt.Sprintf("Participants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ChatRoomValidationError is the validation error returned by
// ChatRoom.Validate if the designated constraints aren't met.
type ChatRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatRoomValidationError) ErrorName() string { return "ChatRoomValidationError" }

// Error satisfies the builtin error interface
func (e ChatRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatRoomValidationError{}

// Validate checks the field values on StreamChatEvent with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *StreamChatEvent) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Event.(type) {

	case *StreamChatEvent_None:

		if v, ok := interface{}(m.GetNone()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventValidationError{
					field:  "None",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamChatEvent_LoadRoom:

		if v, ok := interface{}(m.GetLoadRoom()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventValidationError{
					field:  "LoadRoom",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamChatEvent_LoadRooms:

		if v, ok := interface{}(m.GetLoadRooms()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventValidationError{
					field:  "LoadRooms",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamChatEvent_LeaveRoom:

		if v, ok := interface{}(m.GetLeaveRoom()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventValidationError{
					field:  "LeaveRoom",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamChatEvent_LeaveRooms:

		if v, ok := interface{}(m.GetLeaveRooms()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventValidationError{
					field:  "LeaveRooms",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamChatEvent_SendRooms:

		if v, ok := interface{}(m.GetSendRooms()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventValidationError{
					field:  "SendRooms",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamChatEvent_SendMessage:

		if v, ok := interface{}(m.GetSendMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventValidationError{
					field:  "SendMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamChatEvent_SendMessages:

		if v, ok := interface{}(m.GetSendMessages()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventValidationError{
					field:  "SendMessages",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamChatEvent_ForceClose:

		if v, ok := interface{}(m.GetForceClose()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventValidationError{
					field:  "ForceClose",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamChatEvent_InviteProfile:

		if v, ok := interface{}(m.GetInviteProfile()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventValidationError{
					field:  "InviteProfile",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// StreamChatEventValidationError is the validation error returned by
// StreamChatEvent.Validate if the designated constraints aren't met.
type StreamChatEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamChatEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamChatEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamChatEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamChatEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamChatEventValidationError) ErrorName() string { return "StreamChatEventValidationError" }

// Error satisfies the builtin error interface
func (e StreamChatEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamChatEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamChatEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamChatEventValidationError{}

// Validate checks the field values on EventNone with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EventNone) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// EventNoneValidationError is the validation error returned by
// EventNone.Validate if the designated constraints aren't met.
type EventNoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventNoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventNoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventNoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventNoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventNoneValidationError) ErrorName() string { return "EventNoneValidationError" }

// Error satisfies the builtin error interface
func (e EventNoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventNone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventNoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventNoneValidationError{}

// Validate checks the field values on EventLoadRoom with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EventLoadRoom) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventLoadRoomValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventLoadRoomValidationError is the validation error returned by
// EventLoadRoom.Validate if the designated constraints aren't met.
type EventLoadRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventLoadRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventLoadRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventLoadRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventLoadRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventLoadRoomValidationError) ErrorName() string { return "EventLoadRoomValidationError" }

// Error satisfies the builtin error interface
func (e EventLoadRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventLoadRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventLoadRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventLoadRoomValidationError{}

// Validate checks the field values on EventLoadRooms with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EventLoadRooms) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// EventLoadRoomsValidationError is the validation error returned by
// EventLoadRooms.Validate if the designated constraints aren't met.
type EventLoadRoomsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventLoadRoomsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventLoadRoomsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventLoadRoomsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventLoadRoomsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventLoadRoomsValidationError) ErrorName() string { return "EventLoadRoomsValidationError" }

// Error satisfies the builtin error interface
func (e EventLoadRoomsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventLoadRooms.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventLoadRoomsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventLoadRoomsValidationError{}

// Validate checks the field values on EventLeaveRoom with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EventLeaveRoom) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventLeaveRoomValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventLeaveRoomValidationError is the validation error returned by
// EventLeaveRoom.Validate if the designated constraints aren't met.
type EventLeaveRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventLeaveRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventLeaveRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventLeaveRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventLeaveRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventLeaveRoomValidationError) ErrorName() string { return "EventLeaveRoomValidationError" }

// Error satisfies the builtin error interface
func (e EventLeaveRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventLeaveRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventLeaveRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventLeaveRoomValidationError{}

// Validate checks the field values on EventLeaveRooms with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EventLeaveRooms) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// EventLeaveRoomsValidationError is the validation error returned by
// EventLeaveRooms.Validate if the designated constraints aren't met.
type EventLeaveRoomsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventLeaveRoomsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventLeaveRoomsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventLeaveRoomsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventLeaveRoomsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventLeaveRoomsValidationError) ErrorName() string { return "EventLeaveRoomsValidationError" }

// Error satisfies the builtin error interface
func (e EventLeaveRoomsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventLeaveRooms.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventLeaveRoomsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventLeaveRoomsValidationError{}

// Validate checks the field values on EventSendMessage with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EventSendMessage) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventSendMessageValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventSendMessageValidationError is the validation error returned by
// EventSendMessage.Validate if the designated constraints aren't met.
type EventSendMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventSendMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventSendMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventSendMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventSendMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventSendMessageValidationError) ErrorName() string { return "EventSendMessageValidationError" }

// Error satisfies the builtin error interface
func (e EventSendMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventSendMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventSendMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventSendMessageValidationError{}

// Validate checks the field values on EventSendMessages with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EventSendMessages) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventSendMessagesValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EventSendMessagesValidationError is the validation error returned by
// EventSendMessages.Validate if the designated constraints aren't met.
type EventSendMessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventSendMessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventSendMessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventSendMessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventSendMessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventSendMessagesValidationError) ErrorName() string {
	return "EventSendMessagesValidationError"
}

// Error satisfies the builtin error interface
func (e EventSendMessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventSendMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventSendMessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventSendMessagesValidationError{}

// Validate checks the field values on EventSendRooms with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EventSendRooms) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRooms() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventSendRoomsValidationError{
					field:  fmt.Sprintf("Rooms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EventSendRoomsValidationError is the validation error returned by
// EventSendRooms.Validate if the designated constraints aren't met.
type EventSendRoomsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventSendRoomsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventSendRoomsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventSendRoomsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventSendRoomsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventSendRoomsValidationError) ErrorName() string { return "EventSendRoomsValidationError" }

// Error satisfies the builtin error interface
func (e EventSendRoomsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventSendRooms.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventSendRoomsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventSendRoomsValidationError{}

// Validate checks the field values on EventInviteProfile with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EventInviteProfile) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetParticipant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventInviteProfileValidationError{
				field:  "Participant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventInviteProfileValidationError is the validation error returned by
// EventInviteProfile.Validate if the designated constraints aren't met.
type EventInviteProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventInviteProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventInviteProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventInviteProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventInviteProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventInviteProfileValidationError) ErrorName() string {
	return "EventInviteProfileValidationError"
}

// Error satisfies the builtin error interface
func (e EventInviteProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventInviteProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventInviteProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventInviteProfileValidationError{}

// Validate checks the field values on EventForceClose with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EventForceClose) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// EventForceCloseValidationError is the validation error returned by
// EventForceClose.Validate if the designated constraints aren't met.
type EventForceCloseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventForceCloseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventForceCloseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventForceCloseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventForceCloseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventForceCloseValidationError) ErrorName() string { return "EventForceCloseValidationError" }

// Error satisfies the builtin error interface
func (e EventForceCloseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventForceClose.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventForceCloseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventForceCloseValidationError{}

// Validate checks the field values on ListChatMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListChatMessageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChatMessageRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChatMessageRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChatMessageRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChatMessageRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListChatMessageRequestValidationError is the validation error returned by
// ListChatMessageRequest.Validate if the designated constraints aren't met.
type ListChatMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChatMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChatMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChatMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChatMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChatMessageRequestValidationError) ErrorName() string {
	return "ListChatMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListChatMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChatMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChatMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChatMessageRequestValidationError{}

// Validate checks the field values on ListChatMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListChatMessageResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListChatMessageResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListChatMessageResponseValidationError is the validation error returned by
// ListChatMessageResponse.Validate if the designated constraints aren't met.
type ListChatMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChatMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChatMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChatMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChatMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChatMessageResponseValidationError) ErrorName() string {
	return "ListChatMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListChatMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChatMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChatMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChatMessageResponseValidationError{}

// Validate checks the field values on ListChatRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListChatRoomRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChatRoomRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChatRoomRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChatRoomRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChatRoomRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListChatRoomRequestValidationError is the validation error returned by
// ListChatRoomRequest.Validate if the designated constraints aren't met.
type ListChatRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChatRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChatRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChatRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChatRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChatRoomRequestValidationError) ErrorName() string {
	return "ListChatRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListChatRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChatRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChatRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChatRoomRequestValidationError{}

// Validate checks the field values on ListChatRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListChatRoomResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListChatRoomResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListChatRoomResponseValidationError is the validation error returned by
// ListChatRoomResponse.Validate if the designated constraints aren't met.
type ListChatRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChatRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChatRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChatRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChatRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChatRoomResponseValidationError) ErrorName() string {
	return "ListChatRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListChatRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChatRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChatRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChatRoomResponseValidationError{}
